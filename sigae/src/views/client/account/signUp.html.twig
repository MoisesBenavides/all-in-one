<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Registro | AIO</title>

  <link rel="stylesheet" href="{{ asset('css/styles.css') }}">
  <link rel="icon" type="image/x-icon" href="{{ asset('ico/logo-positivo.ico') }}">
  <style>
    @font-face {
      font-family: 'Teachers';
      src: url("{{ asset('font/Teachers-VariableFont_wght.ttf') }}");
      font-weight: normal;
      font-style: normal;
    }

    body, input, select, button, option {
      font-family: 'Teachers', sans-serif;
    }

    .input-container {
      margin-bottom: 1rem;
    }

    .input-wrapper {
      position: relative;
    }

    .error-message {
      color: #950d03;
      font-size: 14px;
      margin-top: 4px;
      min-height: 20px; /* Reserve space for error message */
    }

    .password-toggle {
      position: absolute;
      right: 10px;
      top: 50%;
      transform: translateY(-50%);
      background: none;
      border: none;
      cursor: pointer;
    }

       .btn{
            background-color: #dc2626
        }

        .btn:hover{
            background-color: #b91c1c
        }
  </style>
</head>

<body class="bg-gray-100">
    <div class="flex justify-center items-center min-h-screen px-4 sm:px-0">
        <div class="w-full max-w-md bg-white rounded-lg shadow-md p-8 relative">
            <div class="text-center mb-8">
                <img src="{{ asset('img/AIO Positivo.png') }}" alt="AIO Logo" class="mx-auto max-w-[200px] sm:max-w-[150px]">
            </div>

            <form id="signup-form" action="{{ path('doSignup') }}" method="POST">
                <div class="mb-6 relative">
                    <input traducir="correo" id="email" name="email" type="email" placeholder="Correo"
                           class="w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 transition">
                    <div class="error-message" id="email-error"></div>
                </div>

                <div class="mb-6 relative">
                    <input traducir="nombre" id="nombre" name="nombre" type="text" placeholder="Nombre"
                           class="w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 transition">
                    <div class="error-message" id="nombre-error"></div>
                </div>

                <div class="mb-6 relative">
                    <input traducir="apellido" id="apellido" name="apellido" type="text" placeholder="Apellido"
                           class="w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 transition">
                    <div class="error-message" id="apellido-error"></div>
                </div>

                <div class="mb-6 relative">
                    <div class="relative">
                        <input traducir="contrasena" id="contrasena" name="contrasena" type="password" placeholder="Contraseña"
                               class="w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 transition">
                        <button type="button" class="password-toggle" onclick="togglePasswordVisibility('contrasena')">
                            <svg class="h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                            </svg>
                        </button>
                    </div>
                    <div class="error-message" id="contrasena-error"></div>
                </div>

                <div class="mb-4 relative">
                    <div class="relative">
                        <input traducir="repita_contrasena" id="repContrasena" name="repContrasena" type="password" placeholder="Repetir contraseña"
                               class="w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 transition">
                        <button type="button" class="password-toggle" onclick="togglePasswordVisibility('repContrasena')">
                            <svg class="h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                            </svg>
                        </button>
                    </div>
                    <div class="error-message" id="repContrasena-error"></div>
                </div>

                <p traducir="minimo_caracteres" class="text-sm text-gray-600 mb-6">Use un mínimo 6 caracteres con mayúsculas, minúsculas y números.</p>

                {% if response.errors is defined and response.errors is not empty %}
                    <div id="error-container" class="text-[#950d03] p-4 rounded-md mb-4">
                        <ul id="error-list">
                            {% for error in response.errors %}
                                <li>{{ error }}</li>
                            {% endfor %}
                        </ul>
                    </div>
                {% endif %}

                <button traducir="enviar" type="submit" class="btn w-full duration-300 text-white py-2 rounded-md transition">
                    Enviar
                </button>
            </form>

            <div class="mt-6 text-center">
                <p>
                    <a traducir="tienes_cuenta" href="{{ path('login') }}" class="text-sm text-gray-600 hover:underline">¿Ya tienes una cuenta? Inicia sesión aquí</a>
                </p>
            </div>
        </div>
    </div>


  <script src="{{asset('js/traduccion.js')}}"></script>
<script>
      const archivoTraduccion = "{{ asset('translate/signup.json') }}";
        // Inicializar la traducción
        document.addEventListener('DOMContentLoaded', () => {
            inicializarTraduccion(null, archivoTraduccion , 'es');
        });
</script>

  <script>
   // Get form elements
const form = document.getElementById('signup-form');
const email = document.getElementById('email');
const nombre = document.getElementById('nombre');
const apellido = document.getElementById('apellido');
const contrasena = document.getElementById('contrasena');
const repContrasena = document.getElementById('repContrasena');

// Form submit handler
form.addEventListener('submit', (e) => {
    if (!validateInputs()) {
        e.preventDefault();
        return false;
    }
    return true;
});

// Display error message
const setError = (element, message) => {
    element.classList.add('border-red-500');
    const errorDisplay = element.closest('.relative').querySelector('.error-message');
    errorDisplay.textContent = message;
};

// Clear error message
const setSuccess = (element) => {
    element.classList.remove('border-red-500');
    const errorDisplay = element.closest('.relative').querySelector('.error-message');
    errorDisplay.textContent = '';
};

// Validate email format and length
const validarEmail = (email, maxLength = 63) => {
    const regex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
    return regex.test(email) && email.length <= maxLength;
};

// Validate name format and length
const validarNombreApellido = (texto, maxLength = 23) => {
    const regex = /^[a-zA-ZáéíóúÁÉÍÓÚñÑ\s]+$/;
    return regex.test(texto) && texto.length <= maxLength;
};

// Validate password format and length
const validarContrasena = (contrasena, minLength = 6, maxLength = 60) => {
    const hasUpperCase = /[A-Z]/.test(contrasena);
    const hasLowerCase = /[a-z]/.test(contrasena);
    const hasNumbers = /\d/.test(contrasena);
    const validLength = contrasena.length >= minLength && contrasena.length <= maxLength;
    return hasUpperCase && hasLowerCase && hasNumbers && validLength;
};

// Validate individual input field
const validateInput = (input) => {
    const value = input.value.trim();
    
    if (value === '') {
        setError(input, 'Debe llenar todos los campos.');
        return false;
    }

    switch(input.id) {
        case 'email':
            if (!validarEmail(value)) {
                setError(input, 'Por favor, ingrese un correo electrónico válido.');
                return false;
            }
            setSuccess(input);
            break;
        case 'nombre':
        case 'apellido':
            if (!validarNombreApellido(value)) {
                setError(input, 'Por favor, ingrese un nombre o apellido válido.');
                return false;
            }
            setSuccess(input);
            break;
        case 'contrasena':
            if (!validarContrasena(value)) {
                setError(input, 'Use un mínimo de 6 caracteres con mayúsculas, minúsculas y números.');
                return false;
            }
            setSuccess(input);
            break;
        case 'repContrasena':
            if (value !== contrasena.value) {
                setError(input, 'Las contraseñas no coinciden.');
                return false;
            } else if (validarContrasena(contrasena.value)) {
                setSuccess(input);
            }
            break;
    }
    return true;
};

// Validate all inputs
const validateInputs = () => {
    let isValid = true;
    [email, nombre, apellido, contrasena, repContrasena].forEach(input => {
        const currentValid = validateInput(input);
        isValid = isValid && currentValid;
    });
    return isValid;
};

// Real-time validation
[email, nombre, apellido, contrasena, repContrasena].forEach(input => {
    input.addEventListener('input', () => validateInput(input));
});

// Toggle password visibility
function togglePasswordVisibility(inputId) {
    const input = document.getElementById(inputId);
    const button = input.nextElementSibling;
    if (input.type === 'password') {
        input.type = 'text';
        button.innerHTML = `
            <svg class="h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.88 9.88l-3.29-3.29m7.532 7.532l3.29 3.29M3 3l3.59 3.59m0 0A9.953 9.953 0 0112 5c4.478 0 8.268 2.943 9.543 7a10.025 10.025 0 01-4.132 5.411m0 0L21 21" />
            </svg>
        `;
    } else {
        input.type = 'password';
        button.innerHTML = `
            <svg class="h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
            </svg>
        `;
    }
}
  </script>
</body>
</html>