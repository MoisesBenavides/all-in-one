<!DOCTYPE html>
<html lang="en">

<head>
  <!--Es responsivo-->
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Registro | AIO</title>

 <link rel="stylesheet" href="{{ asset('css/styles.css') }}">
  <link rel="icon" type="image/x-icon" href="{{ asset('ico/logo-positivo.ico') }}">
  <style>
    @font-face {
      font-family: 'Teachers';
      src: url("{{ asset('font/Teachers-VariableFont_wght.ttf') }}");
      font-weight: normal;
      font-style: normal;
    }

    body, input, select, button, option {
      font-family: 'Teachers', sans-serif;
    }
  </style>
</head>

<body class="bg-gray-100 flex justify-center items-center min-h-screen">
  <div class="container max-w-full sm:max-w-lg bg-white rounded-lg shadow-md p-6 sm:p-8">
    <div class="text-center mb-8">
      <img class="mx-auto max-w-[200px]" src="{{ asset('img/AIO Positivo.png') }}" alt="AIO Logo" />
    </div>
    <form id="signup-form" action="{{ path('doSignup') }}" method="POST" class="space-y-4">
      <div>
        <input id="email" name="email" type="email" placeholder="Correo" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 transition">
        <p id="email-error" class="mt-1 text-red-500 text-sm hidden"></p>
      </div>
      <div>
        <input id="nombre" name="nombre" type="text" placeholder="Nombre" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 transition">
        <p id="nombre-error" class="mt-1 text-red-500 text-sm hidden"></p>
      </div>
      <div>
        <input id="apellido" name="apellido" type="text" placeholder="Apellido" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 transition">
        <p id="apellido-error" class="mt-1 text-red-500 text-sm hidden"></p>
      </div>
      <div>
        <input id="contrasena" name="contrasena" type="password" placeholder="Contraseña" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 transition">
        <p id="contrasena-error" class="mt-1 text-red-500 text-sm hidden"></p>
      </div>
      <div>
        <input id="repContrasena" name="repContrasena" type="password" placeholder="Repetir contraseña" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 transition">
        <p id="repContrasena-error" class="mt-1 text-red-500 text-sm hidden"></p>
      </div>
      <p class="text-sm text-gray-600">Use un mínimo 6 caracteres con mayúsculas, minúsculas y números.</p>
      <div id="error-container" style="display: none; background-color: #ffcccc; color: #ff0000; padding: 10px; margin-bottom: 10px;"></div>
      <button type="submit"  class="w-full bg-red-600 text-white py-2 rounded-md hover:bg-red-700 transition cursor-pointer">
        Enviar
      </button>
    </form>
    <div class="mt-6 text-center space-y-2">
        <p>
          <a href="{{ path('login') }}" class="text-sm text-gray-600 hover:underline">¿Ya tienes una cuenta? Inicia sesión aquí</a>
        </p>
      </div>
  </div>
  <script>
document.getElementById('signup-form').addEventListener('submit', function(e) {
    e.preventDefault(); // Detener el envío del formulario por defecto
    
    // Realizar la solicitud POST usando fetch
    fetch(this.action, {
        method: 'POST', // Cambiar a POST
        body: new FormData(this), // Enviar los datos del formulario
        headers: {
            'Accept': 'application/json'
        }
    })
    .then(response => response.json())
    .then(data => {
        const errorContainer = document.getElementById('error-container');
        const errorList = document.getElementById('error-list');
        
        errorList.innerHTML = '';
        
        if (data.success) {
            window.location.href = "{{ path('login') }}";
        } else {
            errorContainer.classList.remove('hidden');
            data.errors.forEach(error => {
                const li = document.createElement('li');
                li.textContent = error;
                errorList.appendChild(li);
            });
            
            // Información de depuración
            console.log('Debug info:', data.debug);
            const debugInfo = document.createElement('pre');
            debugInfo.textContent = JSON.stringify(data.debug, null, 2);
            errorList.appendChild(debugInfo);
        }
    })
    .catch(error => {
        console.error('Error:', error);
    });
});




  const form = document.getElementById('signup-form');
const email = document.getElementById('email');
const nombre = document.getElementById('nombre');
const apellido = document.getElementById('apellido');
const contrasena = document.getElementById('contrasena');
const repContrasena = document.getElementById('repContrasena');

form.addEventListener('submit', (e) => {
  e.preventDefault();
  if (validateInputs()) {
    form.submit();
  }
});

const setSuccess = (element) => {
  element.classList.remove('border-red-500');
  element.nextElementSibling.classList.add('hidden');
};

const setError = (element, message) => {
  element.classList.add('border-red-500');
  const errorDisplay = element.nextElementSibling;
  errorDisplay.textContent = message;
  errorDisplay.classList.remove('hidden');
};

const isValidEmail = (email) => {
  const regex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return regex.test(email);
};

const validateInputs = () => {
  let isValid = true;
  const emailValue = email.value.trim();
  const nombreValue = nombre.value.trim();
  const apellidoValue = apellido.value.trim();
  const contrasenaValue = contrasena.value.trim();
  const repContrasenaValue = repContrasena.value.trim();

  if (emailValue === '') {
    setError(email, 'Por favor ingrese su correo electrónico');
    isValid = false;
  } else if (!isValidEmail(emailValue)) {
    setError(email, 'Correo electrónico inválido');
    isValid = false;
  } else {
    setSuccess(email);
  }

  if (nombreValue === '') {
    setError(nombre, 'Por favor ingrese su nombre');
    isValid = false;
  } else {
    setSuccess(nombre);
  }

  if (apellidoValue === '') {
    setError(apellido, 'Por favor ingrese su apellido');
    isValid = false;
  } else {
    setSuccess(apellido);
  }

  if (contrasenaValue === '') {
    setError(contrasena, 'Por favor ingrese una contraseña');
    isValid = false;
  } else if (contrasenaValue.length < 6) {
    setError(contrasena, 'La contraseña debe tener al menos 6 caracteres');
    isValid = false;
  } else if (!/[A-Z]/.test(contrasenaValue) || !/[a-z]/.test(contrasenaValue) || !/\d/.test(contrasenaValue)) {
    setError(contrasena, 'La contraseña debe incluir mayúsculas, minúsculas y números');
    isValid = false;
  } else {
    setSuccess(contrasena);
  }

  if (repContrasenaValue === '') {
    setError(repContrasena, 'Por favor repita la contraseña');
    isValid = false;
  } else if (repContrasenaValue !== contrasenaValue) {
    setError(repContrasena, 'Las contraseñas no coinciden');
    isValid = false;
  } else {
    setSuccess(repContrasena);
  }

  return isValid;
};

// Validar los campos en tiempo real
[email, nombre, apellido, contrasena, repContrasena].forEach(input => {
  input.addEventListener('input', () => {
    validateInputs();
  });
});

// Validar todos los campos al cargar la página
document.addEventListener('DOMContentLoaded', validateInputs);
  </script>
</body>
</html>