<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="AIO taller mecanico en montevideo, Estacionamiento 24 horas y mas">
    <meta name="keywords" content="Taller mecanico, taller mecanico montevideo, taller mecanico cerca de mi, estacionamiento 24 horas, venta de neumaticos">
    <meta name="author" content="All In One">
    <title>Reserva de Servicio Mecánico | AIO</title>
    <link rel="stylesheet" href="{{ asset('css/styles.css') }}">
    <link rel="icon" type="image/x-icon" href="{{ asset('ico/logo-positivo.ico') }}">
    <style>
        @font-face {
            font-family: 'Teachers';
            src: url("{{ asset('font/Teachers-VariableFont_wght.ttf') }}");
            font-weight: normal;
            font-style: normal;
        }
        body, input, select, button, option {
            font-family: 'Teachers', sans-serif;
        }
        .dropdown-menu {
            max-height: 200px;
            overflow-y: auto;
        }
        .btn{
            background-color: #dc2626
        }
        .btn:hover{
            background-color: #b91c1c
        }
    </style>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
</head>
<body>
    {% include 'partials/header.html.twig' %}

    <main class="container mx-auto px-4 py-8">
        <div class="max-w-3xl mx-auto space-y-8">
            <form id="servicioForm" action="{{ path('doBookService')}}" method="POST" class="w-full max-w-[340px] mx-auto">
                <!-- Sección de Tipo de Servicio -->
                <section class="mb-6">
                    <h2 class="text-center text-black text-2xl font-semibold mb-4 bg-neutral-200 rounded-[5px] border border-black py-2">Seleccione el servicio</h2>
                    <div class="relative mb-2">
                        <div id="dropdownButton1" class="w-full h-[60px] px-[22px] py-3.5 bg-white rounded-[10px] border border-[#161212] flex justify-between items-center cursor-pointer">
                            <div id="selectedOption1" class="text-center text-black text-xl font-semibold">Tipo de Servicio</div>
                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 h-6 transition-transform duration-300">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
                            </svg>
                        </div>
                        <div id="dropdownMenu1" class="dropdown-menu absolute z-10 left-0 w-full mt-1 bg-white rounded-lg border border-[#161212] shadow-lg hidden">
                            <div class="py-1">
                                <div class="option cursor-pointer px-[22px] py-3.5 hover:bg-gray-100" data-value="alineacion">Alineación</div>
                                <div class="option cursor-pointer px-[22px] py-3.5 hover:bg-gray-100" data-value="balanceo">Balanceo</div>
                                <div class="option cursor-pointer px-[22px] py-3.5 hover:bg-gray-100" data-value="neumaticos">Servicios neumáticos</div>
                                <div class="option cursor-pointer px-[22px] py-3.5 hover:bg-gray-100" data-value="diagnostico">Diagnóstico</div>
                                <div class="option cursor-pointer px-[22px] py-3.5 hover:bg-gray-100" data-value="completo">Servicio completo (Alineación y Balanceo)</div>
                            </div>
                        </div>
                    </div>
                    <input type="hidden" id="selectedServiceType" name="categoriaServicio" value="">
                </section>

                <!-- Sección de Subtipo de Servicio -->
                <section class="mb-6">
                    <h2 class="text-center text-black text-2xl font-semibold mb-4 bg-neutral-200 rounded-[5px] border border-black py-2">Subtipo de Servicio</h2>
                    <div class="relative mb-2">
                        <div id="dropdownButton2" class="w-full h-[60px] px-[22px] py-3.5 bg-white rounded-[10px] border border-[#161212] flex justify-between items-center cursor-pointer">
                            <div id="selectedOption2" class="text-center text-black text-xl font-semibold">Subtipo de Servicio</div>
                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 h-6 transition-transform duration-300">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
                            </svg>
                        </div>
                        <div id="dropdownMenu2" class="dropdown-menu absolute z-10 left-0 w-full mt-1 bg-white rounded-lg border border-[#161212] shadow-lg hidden">
                            <div id="tipoServicioOptions" class="py-1">
                                <!-- Options will be dynamically populated -->
                            </div>
                        </div>
                    </div>
                    <input type="hidden" id="selectedServiceSubtype" name="tipoServicio" value="">
                </section>

                <!-- Sección de Fecha y Hora -->
                <section class="mb-6">
                    <h2 class="text-center text-black text-2xl font-semibold mb-4 bg-neutral-200 rounded-[5px] border border-black py-2">Fecha y Hora</h2>
                    <div class="w-full max-w-[340px] mx-auto">
                        <input type="hidden" 
                            id="fecha_inicio" 
                            name="fecha_inicio" 
                            value="">
                        
                        <input type="date" 
                            id="fecha_selector" 
                            class="w-full h-[60px] px-[22px] py-3.5 bg-white rounded-[10px] border border-[#161212] text-center text-black text-xl font-semibold mb-4"
                            required>
                        
                        <div id="loadingIndicator" class="hidden">
                            <div class="flex items-center justify-center py-4">
                                <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-red-600"></div>
                                <span class="ml-2">Cargando horarios disponibles...</span>
                            </div>
                        </div>

                        <div id="timeSlots" class="grid grid-cols-3 gap-2 mt-4"></div>

                        <div class="w-full flex flex-col space-y-2 justify-center items-center text-sm mt-4">
                            <p>Horario de atención: 5:00 AM - 5:00 PM</p>
                            <p id="serviceDurationMessage" class="text-red-600 hidden">Este servicio requiere seleccionar dos horarios consecutivos</p>
                        </div>
                    </div>
                </section>

                <!-- Sección de Tipo de Vehículo -->
                <section id="tipoVehiculoSection" class="mb-6">
                    <h2 class="text-center text-black text-2xl font-semibold mb-4 bg-neutral-200 rounded-[5px] border border-black py-2">Tipo de vehículo</h2>
                    <div class="relative mb-2">
                        <div id="dropdownButtonAuto" class="w-full h-[60px] px-[22px] py-3.5 bg-white rounded-[10px] border border-[#161212] flex justify-between items-center cursor-pointer">
                            <div id="selectedOptionAuto" class="text-center text-black text-xl font-semibold">Tipo de Vehículo</div>
                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 h-6 transition-transform duration-300">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
                            </svg>
                        </div>
                        <div id="dropTipoVehiculo" class="dropdown-menu absolute z-10 left-0 w-full mt-1 bg-white rounded-lg border border-[#161212] shadow-lg hidden">
                            <div class="py-1">
                                <div class="option cursor-pointer px-[22px] py-3.5 hover:bg-gray-100" data-value="auto">Auto</div>
                                <div class="option cursor-pointer px-[22px] py-3.5 hover:bg-gray-100" data-value="moto">Motocicleta</div>
                                <div class="option cursor-pointer px-[22px] py-3.5 hover:bg-gray-100" data-value="camion">Pequeño camión</div>
                                <div class="option cursor-pointer px-[22px] py-3.5 hover:bg-gray-100" data-value="camioneta">Camioneta</div>
                                <div class="option cursor-pointer px-[22px] py-3.5 hover:bg-gray-100" data-value="utilitario">Pequeño utilitario</div>
                            </div>
                        </div>
                    </div>
                    <input type="hidden" id="tipoVehiculo" name="tipoVehiculo" value="">
                </section>

                <!-- Sección de Vehículos -->
                <section class="mb-6">
                    <h2 class="text-center text-black text-2xl font-semibold mb-4 bg-neutral-200 rounded-[5px] border border-black py-2">Tus vehículos</h2>
                    <div class="relative w-full max-w-[340px] mx-auto">
                        <select id="vehiculosDropdown" name="matricula" class="w-full h-[60px] px-[22px] py-3.5 bg-white rounded-[10px] border border-[#161212] text-center text-black text-xl font-semibold">
                            <option value="" selected disabled>Seleccione un vehículo</option>
                            {% if misVehiculos %}
                                {% for vehiculo in misVehiculos %}
                                    <option value="{{ vehiculo.matricula }}" data-tipo="{{ vehiculo.tipo }}">{{ vehiculo.matricula }} ({{ vehiculo.tipo }})</option>
                                {% endfor %}
                            {% else %}
                                <option value="" disabled>No tienes vehículos vinculados</option>
                            {% endif %}
                        </select>
                    </div>
                </section>

                <div id="matriculaYaContainer" class="mb-6 w-full max-w-[340px] mx-auto">
                    <input id="matriculaYa" name="matriculaYa" type="text" placeholder="O registra ya con Matrícula" class="w-full h-[50px] px-[22px] py-3.5 text-[#2f353c] text-[22px] font-normal tracking-wide bg-white rounded-md border border-[#2f353c] text-left">
                </div>

                <!-- Sección de errores -->
                {% if response is defined and response.errors is defined and response.errors is not empty %}
                    <div id="error-container" class="text-red-600 mt-4">
                        <ul id="error-list">
                            {% for error in response.errors %}
                                <li>{{ error }}</li>
                            {% endfor %}
                        </ul>
                    </div>
                {% endif %}

                <div class="w-full max-w-[340px] mx-auto">
                    <button type="submit" class="w-full h-[62px] px-7 py-2.5 duration-300 btn rounded-lg text-neutral-50 text-[32px] font-bold leading-[51.78px]">Continuar</button>
                </div>
            </form>
        </div>
    </main>

    {% include 'partials/footer.html.twig' %}

   
    <script src="{{ asset('js/serviceHandler.js') }}"></script>
  <script>
                    const DateUtils = {
                        getUruguayDate(date) {
                            return new Date(new Date(date).toLocaleString('en-US', { timeZone: 'America/Montevideo' }));
                        },

                        compareOnlyDates(date1, date2) {
                            const d1 = new Date(date1);
                            const d2 = new Date(date2);
                            return d1.getFullYear() === d2.getFullYear() &&
                                d1.getMonth() === d2.getMonth() &&
                                d1.getDate() === d2.getDate();
                        }
                    };

                    // URL para el servicio de horarios bloqueados
                    const GET_BLOCKED_TIMES_URL = "{{ path('getServicesSchedule') }}";

                    // TimeSlotHandler
                    const TimeSlotHandler = {
                        servicioSeleccionadoDuracion: 0,
                        primerHorarioSeleccionado: null,

                        updateTimeSlots(selectedDate) {
                            const timeSlotsContainer = document.getElementById('timeSlots');
                            const serviceDurationMessage = document.getElementById('serviceDurationMessage');
                            const loadingIndicator = document.getElementById('loadingIndicator');
                            const errorContainer = document.getElementById('error-container');

                            // Validar fecha
                            try {
                                const today = DateUtils.getUruguayDate(new Date());
                                const selected = DateUtils.getUruguayDate(selectedDate);

                                // Validar solo si la fecha es anterior a hoy
                                if (selected < today && !DateUtils.compareOnlyDates(selected, today)) {
                                    throw new Error('No se pueden seleccionar fechas pasadas');
                                }

                                // Validar horario del taller si es el día actual
                                if (DateUtils.compareOnlyDates(selected, today)) {
                                    const currentHour = today.getHours();
                                    if (currentHour >= 17 || currentHour < 5) {
                                        throw new Error('El taller está cerrado en este momento. Horario de atención: 5:00 AM - 5:00 PM');
                                    }
                                }

                            } catch (error) {
                                this.showError(error.message);
                                return Promise.reject(error);
                            }

                            // Validaciones iniciales
                            if (!timeSlotsContainer) {
                                return Promise.reject(new Error('Error de configuración: contenedor no encontrado'));
                            }

                            if (!this.servicioSeleccionadoDuracion) {
                                this.showError('Por favor, seleccione un servicio antes de elegir el horario.');
                                return Promise.reject(new Error('No se ha seleccionado un servicio'));
                            }

                            // Mostrar loading y limpiar estado
                            if (loadingIndicator) loadingIndicator.classList.remove('hidden');
                            if (errorContainer) errorContainer.classList.add('hidden');

                            this.resetState(timeSlotsContainer);

                            // Construir URL
                            const date = new Date(selectedDate);
                            const formattedDate = [
                                date.getFullYear(),
                                String(date.getMonth() + 1).padStart(2, '0'),
                                String(date.getDate()).padStart(2, '0')
                            ].join('-');

                            const requestUrl = `${GET_BLOCKED_TIMES_URL}?date=${encodeURIComponent(formattedDate)}`;

                            // Hacer la petición
                            return fetch(requestUrl, {
                                method: 'GET',
                                headers: {
                                    'Accept': 'application/json',
                                    'Content-Type': 'application/json',
                                    'X-Requested-With': 'XMLHttpRequest'
                                },
                                credentials: 'include'
                            })
                            .then(async response => {
                                if (!response.ok) {
                                    const errorData = await response.text();
                                    try {
                                        const parsedError = JSON.parse(errorData);
                                        throw new Error(parsedError.error || 'Error al obtener los horarios');
                                    } catch (e) {
                                        throw new Error(`Error ${response.status}: ${errorData || response.statusText}`);
                                    }
                                }
                                return response.json();
                            })
                            .then(data => {
                                if (!data || !data.horariosTaller) {
                                    throw new Error('Formato de respuesta inválido');
                                }

                                const slots = Object.entries(data.horariosTaller);
                                return this.renderTimeSlots(slots, selectedDate, serviceDurationMessage);
                            })
                            .catch(error => {
                                this.showError(error.message);
                                timeSlotsContainer.innerHTML = '';
                                throw error;
                            })
                            .finally(() => {
                                if (loadingIndicator) loadingIndicator.classList.add('hidden');
                            });
                        },

                        resetState(container) {
                            this.primerHorarioSeleccionado = null;
                            if (fechaInicio) fechaInicio.value = '';
                            container.innerHTML = '';
                        },

                        renderTimeSlots(slots, selectedDate, serviceDurationMessage) {
                            const container = document.getElementById('timeSlots');
                            if (!container) {
                                throw new Error('Contenedor no encontrado');
                            }

                            slots
                                .sort(([, a], [, b]) => {
                                    const timeA = a.hora_inicio || a.inicio || '';
                                    const timeB = b.hora_inicio || b.inicio || '';
                                    return timeA.localeCompare(timeB);
                                })
                                .forEach(([lapso, info]) => {
                                    try {
                                        const button = this.createTimeSlotButton(lapso, info, selectedDate);
                                        container.appendChild(button);
                                    } catch (error) {
                                        console.error('Error creando botón:', error);
                                    }
                                });

                            if (serviceDurationMessage) {
                                serviceDurationMessage.classList[
                                    this.servicioSeleccionadoDuracion > 30 ? 'remove' : 'add'
                                ]('hidden');
                            }
                        },

                        createTimeSlotButton(lapso, info, selectedDate) {
                            const button = document.createElement('button');
                            button.type = 'button';
                            
                            const horaInicio = info.hora_inicio || info.inicio || '';
                            const horaFin = info.hora_fin || info.fin || '';
                            
                            button.textContent = `${horaInicio} - ${horaFin}`;
                            button.setAttribute('data-lapso', lapso);
                            button.setAttribute('data-info', JSON.stringify({
                                inicio: horaInicio,
                                fin: horaFin,
                                ocupado: info.ocupado
                            }));

                            let isDisabled = info.ocupado;

                            // Verificar si el slot ya pasó (solo para el día actual)
                            if (this.isCurrentDay(selectedDate)) {
                                const currentTime = DateUtils.getUruguayDate(new Date());
                                const [hours, minutes] = horaInicio.split(':');
                                const slotTime = new Date(selectedDate);
                                slotTime.setHours(parseInt(hours, 10), parseInt(minutes, 10), 0);

                                // Validar horario del taller
                                const slotHour = parseInt(hours, 10);
                                if (slotHour < 5 || slotHour >= 17) {
                                    isDisabled = true;
                                }

                                // Validar si el horario ya pasó
                                if (slotTime < currentTime) {
                                    isDisabled = true;
                                }
                            }

                            button.className = `w-full p-2 rounded-md text-center transition-colors ${
                                isDisabled 
                                    ? 'bg-gray-100 text-gray-400 cursor-not-allowed' 
                                    : 'bg-white border border-gray-300 hover:bg-gray-50'
                            }`;

                            if (!isDisabled) {
                                button.addEventListener('click', () => this.handleTimeSelection(lapso, info, button));
                            }

                            button.disabled = isDisabled;
                            return button;
                        },

                        isCurrentDay(selectedDate) {
                            const selected = DateUtils.getUruguayDate(selectedDate);
                            const now = DateUtils.getUruguayDate(new Date());
                            return DateUtils.compareOnlyDates(selected, now);
                        },

                        handleTimeSelection(lapso, timeInfo, button) {
                            const fechaInput = document.getElementById('fecha_inicio');
                            const datePicker = document.getElementById('fecha_selector');
                            
                            if (!datePicker?.value) {
                                this.showError('Por favor, seleccione primero una fecha.');
                                return;
                            }

                            if (this.servicioSeleccionadoDuracion <= 30) {
                                this.handleSingleSelection(button, timeInfo, datePicker.value);
                            } else {
                                this.handleDoubleSelection(lapso, button);
                            }
                        },

                        handleSingleSelection(button, timeInfo, selectedDate) {
                            document.querySelectorAll('#timeSlots button').forEach(btn => {
                                btn.classList.remove('bg-red-600', 'text-white');
                            });
                            
                            button.classList.add('bg-red-600', 'text-white');
                            if (fechaInicio) {
                                const horaInicio = timeInfo.hora_inicio || timeInfo.inicio;
                                fechaInicio.value = `${selectedDate}T${horaInicio}`;
                            }
                        },

                        handleDoubleSelection(lapso, selectedButton) {
                            const buttons = document.querySelectorAll('#timeSlots button');
                            
                            if (!this.primerHorarioSeleccionado) {
                                this.resetSlotStyles();
                                this.primerHorarioSeleccionado = lapso;
                                selectedButton.classList.add('bg-red-600', 'text-white');
                                
                                const currentIndex = Array.from(buttons).indexOf(selectedButton);
                                this.highlightAdjacentSlots(buttons, currentIndex);
                            } else {
                                this.processSecondSelection(buttons, selectedButton);
                            }
                        },

                        resetSlotStyles() {
                            document.querySelectorAll('#timeSlots button').forEach(btn => {
                                btn.classList.remove('bg-red-600', 'text-white', 'bg-yellow-200');
                            });
                        },

                        highlightAdjacentSlots(buttons, currentIndex) {
                            if (currentIndex > 0 && !buttons[currentIndex - 1].disabled) {
                                buttons[currentIndex - 1].classList.add('bg-yellow-200');
                            }
                            if (currentIndex < buttons.length - 1 && !buttons[currentIndex + 1].disabled) {
                                buttons[currentIndex + 1].classList.add('bg-yellow-200');
                            }
                        },

                        processSecondSelection(buttons, selectedButton) {
                            const firstButton = Array.from(buttons).find(btn => 
                                btn.getAttribute('data-lapso') === this.primerHorarioSeleccionado);
                            const firstIndex = Array.from(buttons).indexOf(firstButton);
                            const secondIndex = Array.from(buttons).indexOf(selectedButton);

                            if (Math.abs(firstIndex - secondIndex) === 1) {
                                this.confirmDoubleSelection(buttons, firstIndex, secondIndex);
                            } else {
                                this.showError('Por favor, seleccione dos horarios consecutivos');
                                this.resetSlotStyles();
                                this.primerHorarioSeleccionado = null;
                            }
                        },

                        confirmDoubleSelection(buttons, firstIndex, secondIndex) {
                            this.resetSlotStyles();
                            
                            const startIndex = Math.min(firstIndex, secondIndex);
                            const endIndex = Math.max(firstIndex, secondIndex);
                            
                            buttons[startIndex].classList.add('bg-red-600', 'text-white');
                            buttons[endIndex].classList.add('bg-red-600', 'text-white');

                            const startButton = buttons[startIndex];
                            const startInfo = JSON.parse(startButton.getAttribute('data-info') || '{}');

                            if (fechaSelector?.value && startInfo.inicio) {
                                if (fechaInicio) {
                                    fechaInicio.value = `${fechaSelector.value}T${startInfo.inicio}`;
                                }
                            }

                            this.primerHorarioSeleccionado = null;
                        },

                        showError(message) {
                            const errorContainer = document.getElementById('error-container');
                            if (!errorContainer) return;

                            errorContainer.classList.remove('hidden');
                            const errorList = document.getElementById('error-list');
                            
                            if (errorList) {
                                errorList.innerHTML = `<li>${message}</li>`;
                            } else {
                                errorContainer.textContent = message;
                            }
                            
                            setTimeout(() => errorContainer.classList.add('hidden'), 5000);
                        }
                    };

                    // Exportar TimeSlotHandler para uso global
                    window.TimeSlotHandler = TimeSlotHandler;

                    // Inicialización y setup de event listeners
                    document.addEventListener('DOMContentLoaded', async function() {
                        const fechaSelector = document.getElementById('fecha_selector');
                            const fechaInicio = document.getElementById('fecha_inicio');
                        // Configurar ServiceHandler
                        ServiceHandler.setJsonUrl("{{asset('js/diccionarioTaller.json')}}");

                        try {
                            // Cargar servicios
                            const servicios = await ServiceHandler.cargarServicios();

                            // Configurar dropdowns
                            ServiceHandler.setupDropdown('dropdownButton1', 'dropdownMenu1', '#dropdownMenu1 .option', 'selectedOption1', 'selectedServiceType');
                            ServiceHandler.setupDropdown('dropdownButton2', 'dropdownMenu2', '#tipoServicioOptions .option', 'selectedOption2', 'selectedServiceSubtype');
                            ServiceHandler.setupDropdown('dropdownButtonAuto', 'dropTipoVehiculo', '#dropTipoVehiculo .option', 'selectedOptionAuto', 'tipoVehiculo');

                            // Configurar fecha mínima
                            if (fechaSelector) {
                                const today = DateUtils.getUruguayDate(new Date());
                                const formattedDate = today.toISOString().split('T')[0];
                                fechaSelector.min = formattedDate;
                            }

                            // Evento para actualizar subtipos
                            document.querySelectorAll('#dropdownMenu1 .option').forEach(option => {
                                option.addEventListener('click', () => {
                                    ServiceHandler.updateServiceSubtypes(option.dataset.value, servicios, (subtype, servicioData) => {
                                        document.getElementById('selectedOption2').textContent = servicioData.descripcion;
                                        document.getElementById('selectedServiceSubtype').value = subtype;
                                        TimeSlotHandler.servicioSeleccionadoDuracion = servicioData.tiempo_estimado;
                                        document.getElementById('dropdownMenu2').classList.add('hidden');
                                        
                                        // Cargar horarios si hay una fecha seleccionada
                                        if (fechaSelector && fechaSelector.value) {
                                            TimeSlotHandler.updateTimeSlots(fechaSelector.value);
                                        }
                                    });
                                });
                            });

                            // Event listener para cambio de fecha
                            
                            fechaSelector.addEventListener('change', function() {
                                if (TimeSlotHandler.servicioSeleccionadoDuracion > 0) {
                                    TimeSlotHandler.updateTimeSlots(this.value);
                                } else {
                                    TimeSlotHandler.showError('Por favor, seleccione un servicio antes de elegir el horario.');
                                }
                                // Limpiar la selección de hora cuando cambia la fecha
                                if (fechaInicio) fechaInicio.value = '';
                            });

                            // Event listener para el formulario
                            document.getElementById('servicioForm').addEventListener('submit', validarFormulario);

                            // Setup de manejo de vehículos
                            setupVehicleHandlers();

                        } catch (error) {
                            console.error('Error en la inicialización:', error);
                            TimeSlotHandler.showError('Error al inicializar el formulario');
                        }
                    });

                    // Función de validación del formulario
                    function validarFormulario(event) {
                        let isValid = true;
                        let errorMessage = '';

                        if (!document.getElementById('selectedServiceType').value) {
                            isValid = false;
                            errorMessage += 'Por favor, seleccione un tipo de servicio. ';
                        } else if (!document.getElementById('selectedServiceSubtype').value) {
                            isValid = false;
                            errorMessage += 'Por favor, seleccione un subtipo de servicio. ';
                        } else if (!document.getElementById('fecha_inicio').value) {
                            isValid = false;
                            errorMessage += 'Por favor, seleccione fecha y hora. ';
                        } else if (!document.getElementById('tipoVehiculo').value && 
                            document.getElementById('vehiculosDropdown').value === "") {
                            isValid = false;
                            errorMessage += 'Por favor, seleccione un tipo de vehículo o un vehículo existente. ';
                        }

                        if (!isValid) {
                            event.preventDefault();
                            TimeSlotHandler.showError(errorMessage);
                        }
                    }

                    // Configuración del manejo de vehículos
                    function setupVehicleHandlers() {
                        const vehiculosDropdown = document.getElementById('vehiculosDropdown');
                        const tipoVehiculoSection = document.getElementById('tipoVehiculoSection');
                        const dropdownButtonAuto = document.getElementById('dropdownButtonAuto');
                        const selectedOptionAuto = document.getElementById('selectedOptionAuto');
                        const tipoVehiculo = document.getElementById('tipoVehiculo');
                        const matriculaYa = document.getElementById('matriculaYa');
                        const matriculaYaContainer = document.getElementById('matriculaYaContainer');
                        const dropTipoVehiculo = document.getElementById('dropTipoVehiculo');

                        // Opción default para mis vehículos
                        const defaultOption = document.createElement('option');
                        defaultOption.value = "default";
                        defaultOption.text = "Seleccione un vehículo";
                        vehiculosDropdown.insertBefore(defaultOption, vehiculosDropdown.firstChild);
                        vehiculosDropdown.value = "default";

                        // Event listener para el dropdown de vehículo
                        vehiculosDropdown.addEventListener('change', function() {
                            if (this.value !== "" && this.value !== "default") {
                                const selectedOption = this.options[this.selectedIndex];
                                const tipo = selectedOption.getAttribute('data-tipo');
                                
                                selectedOptionAuto.textContent = tipo;
                                tipoVehiculo.value = tipo.toLowerCase();
                                
                                tipoVehiculoSection.classList.add('disabled-section');
                                dropdownButtonAuto.style.pointerEvents = 'none';
                                dropdownButtonAuto.style.backgroundColor = '#f3f4f6';
                                dropTipoVehiculo.classList.add('hidden');
                                
                                matriculaYa.value = '';
                                matriculaYa.removeAttribute('name');
                                matriculaYaContainer.style.display = 'none';
                                
                                this.setAttribute('name', 'matricula');
                            } else {
                                tipoVehiculoSection.classList.remove('disabled-section');
                                dropdownButtonAuto.style.pointerEvents = 'auto';
                                dropdownButtonAuto.style.backgroundColor = 'white';
                                matriculaYaContainer.style.display = 'block';
                                selectedOptionAuto.textContent = 'Tipo de Vehículo';
                                tipoVehiculo.value = '';
                                
                                this.removeAttribute('name');
                                matriculaYa.setAttribute('name', 'matriculaYa');
                            }
                        });

                        // Event listener para matrícula ya
                        matriculaYa.addEventListener('input', function() {
                            if (this.value !== "") {
                                vehiculosDropdown.value = "default";
                                vehiculosDropdown.removeAttribute('name');
                                this.setAttribute('name', 'matriculaYa');
                                tipoVehiculoSection.classList.remove('disabled-section');
                                dropdownButtonAuto.style.pointerEvents = 'auto';
                                dropdownButtonAuto.style.backgroundColor = 'white';
                            } else {
                                this.removeAttribute('name');
                            }
                        });
                    }
                    handleMatriculaInput.bind(this);
                

            handleVehiculoChange(event) {
                const tipoVehiculoSection = document.getElementById('tipoVehiculoSection');
                const dropdownButtonAuto = document.getElementById('dropdownButtonAuto');
                const selectedOptionAuto = document.getElementById('selectedOptionAuto');
                const tipoVehiculo = document.getElementById('tipoVehiculo');
                const matriculaYa = document.getElementById('matriculaYa');
                const matriculaYaContainer = document.getElementById('matriculaYaContainer');
                const dropTipoVehiculo = document.getElementById('dropTipoVehiculo');

                if (event.target.value !== "" && event.target.value !== "default") {
                    const selectedOption = event.target.options[event.target.selectedIndex];
                    const tipo = selectedOption.getAttribute('data-tipo');
                    
                    // Actualizar tipo de vehículo
                    selectedOptionAuto.textContent = tipo;
                    tipoVehiculo.value = tipo.toLowerCase();
                    
                    // Deshabilitar sección de tipo de vehículo
                    tipoVehiculoSection.classList.add('disabled-section');
                    dropdownButtonAuto.style.pointerEvents = 'none';
                    dropdownButtonAuto.style.backgroundColor = '#f3f4f6';
                    dropTipoVehiculo.classList.add('hidden');
                    
                    // Limpiar y ocultar matrícula manual
                    matriculaYa.value = '';
                    matriculaYa.removeAttribute('name');
                    matriculaYaContainer.style.display = 'none';
                    
                    event.target.setAttribute('name', 'matricula');
                } else {
                    // Resetear todo
                    tipoVehiculoSection.classList.remove('disabled-section');
                    dropdownButtonAuto.style.pointerEvents = 'auto';
                    dropdownButtonAuto.style.backgroundColor = 'white';
                    matriculaYaContainer.style.display = 'block';
                    selectedOptionAuto.textContent = 'Tipo de Vehículo';
                    tipoVehiculo.value = '';
                    
                    event.target.removeAttribute('name');
                    matriculaYa.setAttribute('name', 'matriculaYa');
                }
            },

            handleMatriculaInput(event) {
                const vehiculosDropdown = document.getElementById('vehiculosDropdown');
                const tipoVehiculoSection = document.getElementById('tipoVehiculoSection');
                const dropdownButtonAuto = document.getElementById('dropdownButtonAuto');

                if (event.target.value !== "") {
                    vehiculosDropdown.value = "default";
                    vehiculosDropdown.removeAttribute('name');
                    event.target.setAttribute('name', 'matriculaYa');
                    tipoVehiculoSection.classList.remove('disabled-section');
                    dropdownButtonAuto.style.pointerEvents = 'auto';
                    dropdownButtonAuto.style.backgroundColor = 'white';
                } else {
                    event.target.removeAttribute('name');
                }
            }
        };

        // Inicialización cuando el DOM está listo
        document.addEventListener('DOMContentLoaded', async function() {
            try {
                // Configurar ServiceHandler
                ServiceHandler.setJsonUrl("{{asset('js/diccionarioTaller.json')}}");

                // Cargar servicios
                const servicios = await ServiceHandler.cargarServicios();

                // Configurar dropdowns
                ServiceHandler.setupDropdown('dropdownButton1', 'dropdownMenu1', '#dropdownMenu1 .option', 'selectedOption1', 'selectedServiceType');
                ServiceHandler.setupDropdown('dropdownButton2', 'dropdownMenu2', '#tipoServicioOptions .option', 'selectedOption2', 'selectedServiceSubtype');
                ServiceHandler.setupDropdown('dropdownButtonAuto', 'dropTipoVehiculo', '#dropTipoVehiculo .option', 'selectedOptionAuto', 'tipoVehiculo');

                // Configurar eventos para servicios
                document.querySelectorAll('#dropdownMenu1 .option').forEach(option => {
                    option.addEventListener('click', () => {
                        ServiceHandler.updateServiceSubtypes(option.dataset.value, servicios, (subtype, servicioData) => {
                            document.getElementById('selectedOption2').textContent = servicioData.descripcion;
                            document.getElementById('selectedServiceSubtype').value = subtype;
                            TimeSlotHandler.servicioSeleccionadoDuracion = servicioData.tiempo_estimado;
                            document.getElementById('dropdownMenu2').classList.add('hidden');
                            
                            const fechaSelector = document.getElementById('fecha_selector');
                            if (fechaSelector?.value) {
                                TimeSlotHandler.updateTimeSlots(fechaSelector.value);
                            }
                        });
                    });
                });

                // Inicializar manejadores
                TimeSlotHandler.initialize();
                FormHandler.initialize();
                VehicleHandler.initialize();

            } catch (error) {
                console.error('Error en la inicialización:', error);
                TimeSlotHandler.showError('Error al inicializar el formulario');
            }
        });

        // Exportar para uso global
        window.TimeSlotHandler = TimeSlotHandler;
        window.FormHandler = FormHandler;
        window.VehicleHandler = VehicleHandler;
</script>