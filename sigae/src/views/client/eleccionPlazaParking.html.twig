<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="description" content="AIO taller mecanico en montevideo, Estacionamiento 24 horas y mas">
    <meta name="keywords" content="Taller mecanico, taller mecanico montevideo, taller mecanico cerca de mi, estacionamiento 24 horas, venta de neumaticos">
    <meta name="author" content="All In One">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="{{ asset('css/styles.css') }}">
    <link rel="icon" type="image/x-icon" href="{{ asset('ico/logo-positivo.ico') }}">
    <title>Elección de plaza | AIO</title>
    <style>
        @font-face {
            font-family: 'Teachers';
            src: url("{{ asset('font/Teachers-VariableFont_wght.ttf') }}");
            font-weight: normal;
            font-style: normal;
        }

        body, input, select, button, option {
            font-family: 'Teachers', sans-serif;
        }

         .btnPark{
            background-color: #1f3de0
        }

        .btnPark:hover{
            background-color: #233181
        }
    </style>
</head>

<body class="bg-white">
{% set parking_data = app.session.get('parking') %}

    {% include 'partials/headerParking.html.twig' %}

    <div class="w-full max-w-[1440px] px-4 py-8 mx-auto flex flex-col items-center gap-8">
        <!-- Seleccion de piso -->
        <div class="w-full max-w-[896px] h-[46px] px-4 py-2 bg-[#d9d9d9] rounded-[10px] border border-[#c5b8b8] flex justify-center items-center gap-2.5">
            <button id="decrementFloor" class="w-[30px] h-[30px] bg-gray-100 rounded-full flex items-center justify-center hover:bg-gray-200 transition-colors">&lt;</button>
            <div id="floorDisplay" class="text-center text-black text-base font-medium">Piso 1</div>
            <button id="incrementFloor" class="w-[30px] h-[30px] bg-gray-100 rounded-full flex items-center justify-center hover:bg-gray-200 transition-colors">&gt;</button>
        </div>

        <!-- leyenda -->
        <div class="w-full flex flex-col space-y-2 justify-center items-center text-sm">
            <p><strong>B1-20:</strong> Motos (solo primer piso)</p>
            <p><strong>A1-50:</strong> Autos, camionetas y pequeños camiones (primer piso)</p>
            <p><strong>C1-50:</strong> Autos, camionetas y pequeños camiones (segundo piso)</p>
        </div>

        <!-- Parking Form -->
        <form id="parkingForm" action="{{ path('submitParking') }}" method="POST" class="w-full max-w-[600px]">
             {% if response.errors is defined and response.errors is not empty %}
                    <div id="error-container" class="text-[#950d03] p-4 rounded-md mb-4">
                        <ul id="error-list">
                            {% for error in response.errors %}
                                <li>{{ error }}</li>
                            {% endfor %}
                        </ul>
                    </div>
                {% endif %}

            <div id="parkingContainer" class="w-full min-h-[359px] p-4 pt-8 bg-white border border-black relative">
            </div>

            <input type="hidden" name="plazasSeleccionadas" id="plazasSeleccionadasInput">
            <div class="w-full max-w-[388px] mx-auto flex justify-center mt-4">
                <button type="submit" class="btnPark w-full max-w-[340px] h-[62px] px-7 py-2.5  transition-colors rounded-lg text-white text-[32px] font-bold leading-[51.78px]">
                    Continuar
                </button>
            </div>
        </form>
    </div> 

    <script>    
    const rutaRedireccion = "{{path('aioParking')}}";
    </script>

    <script src="{{ asset('js/parkingTimer.js') }}"></script>

    <script>
        // Variables globales
       const tipoVehiculo = {{ tipoVehiculo|json_encode()|raw }};
    // Asegurarse de que plazasLibres sea siempre un array
    const plazasLibres = Array.isArray({{ plazasLibres|json_encode()|raw }}) ? {{ plazasLibres|json_encode()|raw }} : [];
    let plazasSeleccionadas = [];
    let currentFloor = 1;
    const parkingData = {{ parking_data|json_encode()|raw }};
    console.log('Parking data:', parkingData);

    // Funciones de utilidad
    function createDiv(className, children = []) {
        const div = document.createElement('div');
        div.className = className;
        children.forEach(child => div.appendChild(child));
        return div;
    }

    console.log('Session data:', {
        tipoVehiculo: tipoVehiculo,
        plazasLibres: plazasLibres
    });

    function createParkingSpot(number, prefix) {
        const spotId = `${prefix}${number}`;
        const spot = document.createElement('button');
        
        spot.className = 'flex items-center justify-center border border-black m-0.5 cursor-pointer transition-colors w-14 h-10 hover:bg-gray-100';
        spot.innerHTML = `<div class="text-center text-black text-xs font-bold">${spotId}</div>`;
        spot.dataset.spot = spotId;
        spot.type = 'button';

        // Usar Array.isArray para verificar si plazasLibres es un array
        if (!Array.isArray(plazasLibres) || !plazasLibres.includes(spotId)) {
            spot.classList.add('bg-gray-500', 'text-white', 'cursor-not-allowed');
            spot.disabled = true;
        } else {
            spot.addEventListener('click', (e) => {
                e.preventDefault();
                handleSpotSelection(spot);
            });
        }

        return spot;
    }

    function handleSpotSelection(spot) {
        if (tipoVehiculo === 'camion' || tipoVehiculo === 'utilitario') {
            handleLargeVehicleSelection(spot);
        } else {
            handleRegularSelection(spot);
        }
    }

    function handleRegularSelection(spot) {
        plazasSeleccionadas.forEach(s => s.classList.remove('bg-[#5381c6]', 'text-white'));
        plazasSeleccionadas = [spot];
        spot.classList.add('bg-[#5381c6]', 'text-white');
    }

    function handleLargeVehicleSelection(spot) {
        if (plazasSeleccionadas.length === 0) {
            plazasSeleccionadas.push(spot);
            spot.classList.add('bg-[#5381c6]', 'text-white');
        } else if (plazasSeleccionadas.length === 1) {
            if (isAdjacentSpot(plazasSeleccionadas[0], spot)) {
                plazasSeleccionadas.push(spot);
                spot.classList.add('bg-[#5381c6]', 'text-white');
            } else {
                plazasSeleccionadas[0].classList.remove('bg-[#5381c6]', 'text-white');
                plazasSeleccionadas = [spot];
                spot.classList.add('bg-[#5381c6]', 'text-white');
            }
        } else {
            plazasSeleccionadas.forEach(s => s.classList.remove('bg-[#5381c6]', 'text-white'));
            plazasSeleccionadas = [spot];
            spot.classList.add('bg-[#5381c6]', 'text-white');
        }
    }

    function isAdjacentSpot(spot1, spot2) {
        const num1 = parseInt(spot1.dataset.spot.match(/\d+/)[0]);
        const num2 = parseInt(spot2.dataset.spot.match(/\d+/)[0]);
        return Math.abs(num1 - num2) === 1;
    }

    function generateMotoLayout(container) {
        const motoSpots = createParkingColumn(1, 20, 'B');
        container.appendChild(createDiv('flex justify-center', [
            createDiv('w-1/4', [motoSpots])
        ]));
    }

    function generateAutoLayout(container) {
        const prefix = currentFloor === 1 ? 'A' : 'C';
        const leftColumn = createParkingColumn(1, 20, prefix);
        const middleColumn = createParkingColumn(21, 30, prefix);
        const rightColumn = createParkingColumn(31, 50, prefix);

        container.appendChild(createDiv('flex justify-center gap-[150px] h-full', [
            createDiv('flex flex-col justify-start overflow-y-auto', [leftColumn]),
            createDiv('flex flex-col justify-end', [
                middleColumn,
                createDiv('w-[45px] h-[108px] border-t border-b border-l border-black')
            ]),
            createDiv('flex flex-col justify-start overflow-y-auto', [rightColumn])
        ]));
    }

    function generateLargeVehicleLayout(container) {
        generateAutoLayout(container);
        const message = document.createElement('div');
        message.className = 'absolute top-0 left-0 right-0 text-center text-red-500 p-2';
        message.textContent = 'Debe seleccionar dos espacios consecutivos';
        container.insertBefore(message, container.firstChild);
    }

        function generateParkingLayout() {
            const container = document.getElementById('parkingContainer');
            container.innerHTML = '';

            switch(tipoVehiculo) {
                case 'moto':
                    if (currentFloor === 2) {
                        container.innerHTML = '<p class="text-center text-red-500">Las motos solo pueden estacionar en el primer piso.</p>';
                        return;
                    }
                    generateMotoLayout(container);
                    break;
                case 'auto':
                case 'camioneta':
                    generateAutoLayout(container);
                    break;
                case 'camion':
                case 'utilitario':
                    generateLargeVehicleLayout(container);
                    break;
                default:
                    console.error('Tipo de vehículo no válido');
                    return;
            }
        }

        function createParkingColumn(start, end, prefix) {
            const column = document.createElement('div');
            column.className = 'flex flex-col items-center';
            for (let i = start; i <= end; i++) {
                column.appendChild(createParkingSpot(i, prefix));
            }
            return column;
        }

        // Event Listeners
        document.getElementById('parkingForm').addEventListener('submit', function(e) {
            e.preventDefault();
            
            if (plazasSeleccionadas.length === 0) {
                alert('Debe seleccionar al menos un espacio de estacionamiento');
                return;
            }

            // Crear un array de dos elementos, rellenando con null si es necesario
            let plazasArray = new Array(2).fill(null);
            plazasSeleccionadas.forEach((spot, index) => {
                plazasArray[index] = spot.dataset.spot;
            });

            // Convertir a JSON string y asignar al input hidden
            document.getElementById('plazasSeleccionadasInput').value = JSON.stringify(plazasArray);
            this.submit();
        });

        document.getElementById('decrementFloor').addEventListener('click', function() {
            if (currentFloor > 1) {
                currentFloor--;
                updateFloorDisplay();
                generateParkingLayout();
            }
        });

        document.getElementById('incrementFloor').addEventListener('click', function() {
            if (currentFloor < 2 && tipoVehiculo !== 'moto') {
                currentFloor++;
                updateFloorDisplay();
                generateParkingLayout();
            }
        });

        function updateFloorDisplay() {
            document.getElementById('floorDisplay').textContent = `Piso ${currentFloor}`;
        }

        // Inicialización
        document.addEventListener('DOMContentLoaded', function() {
            updateFloorDisplay();
            generateParkingLayout();
            new ParkingTimer();
            console.log(plazasSeleccionadas);
        });
    </script>

    {% include 'partials/footer.html.twig' %}
</body>
</html>