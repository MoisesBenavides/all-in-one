<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="AIO taller mecanico en montevideo, Estacionamiento 24 horas y mas">
    <meta name="keywords" content="Taller mecanico, taller mecanico montevideo, taller mecanico cerca de mi, estacionamiento 24 horas, venta de neumaticos">
    <meta name="author" content="All In One">
    <title>Reserva de Servicio Mecánico | AIO</title>
    <link rel="stylesheet" href="{{ asset('css/styles.css') }}">
    <link rel="icon" type="image/x-icon" href="{{ asset('ico/logo-positivo.ico') }}">
    <style>
        @font-face {
            font-family: 'Teachers';
            src: url("{{ asset('font/Teachers-VariableFont_wght.ttf') }}");
            font-weight: normal;
            font-style: normal;
        }
        body, input, select, button, option {
            font-family: 'Teachers', sans-serif;
        }
        .dropdown-menu {
            max-height: 200px;
            overflow-y: auto;
        }
        .btn{
            background-color: #dc2626
        }
        .btn:hover{
            background-color: #b91c1c
        }
    </style>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
</head>
<body>
    {% include 'partials/header.html.twig' %}

    <main class="container mx-auto px-4 py-8">
        <div class="max-w-3xl mx-auto space-y-8">
            <form id="servicioForm" action="{{ path('doBookService')}}" method="POST" class="w-full max-w-[340px] mx-auto">
                <!-- Sección de Tipo de Servicio -->
                <section class="mb-6">
                    <h2 class="text-center text-black text-2xl font-semibold mb-4 bg-neutral-200 rounded-[5px] border border-black py-2">Seleccione el servicio</h2>
                    <div class="relative mb-2">
                        <div id="dropdownButton1" class="w-full h-[60px] px-[22px] py-3.5 bg-white rounded-[10px] border border-[#161212] flex justify-between items-center cursor-pointer">
                            <div id="selectedOption1" class="text-center text-black text-xl font-semibold">Tipo de Servicio</div>
                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 h-6 transition-transform duration-300">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
                            </svg>
                        </div>
                        <div id="dropdownMenu1" class="dropdown-menu absolute z-10 left-0 w-full mt-1 bg-white rounded-lg border border-[#161212] shadow-lg hidden">
                            <div class="py-1">
                                <div class="option cursor-pointer px-[22px] py-3.5 hover:bg-gray-100" data-value="alineacion">Alineación</div>
                                <div class="option cursor-pointer px-[22px] py-3.5 hover:bg-gray-100" data-value="balanceo">Balanceo</div>
                                <div class="option cursor-pointer px-[22px] py-3.5 hover:bg-gray-100" data-value="neumaticos">Servicios neumáticos</div>
                                <div class="option cursor-pointer px-[22px] py-3.5 hover:bg-gray-100" data-value="diagnostico">Diagnóstico</div>
                                <div class="option cursor-pointer px-[22px] py-3.5 hover:bg-gray-100" data-value="completo">Servicio completo (Alineación y Balanceo)</div>
                            </div>
                        </div>
                    </div>
                    <input type="hidden" id="selectedServiceType" name="categoriaServicio" value="">
                </section>

                <!-- Sección de Subtipo de Servicio -->
                <section class="mb-6">
                    <h2 class="text-center text-black text-2xl font-semibold mb-4 bg-neutral-200 rounded-[5px] border border-black py-2">Subtipo de Servicio</h2>
                    <div class="relative mb-2">
                        <div id="dropdownButton2" class="w-full h-[60px] px-[22px] py-3.5 bg-white rounded-[10px] border border-[#161212] flex justify-between items-center cursor-pointer">
                            <div id="selectedOption2" class="text-center text-black text-xl font-semibold">Subtipo de Servicio</div>
                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 h-6 transition-transform duration-300">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
                            </svg>
                        </div>
                        <div id="dropdownMenu2" class="dropdown-menu absolute z-10 left-0 w-full mt-1 bg-white rounded-lg border border-[#161212] shadow-lg hidden">
                            <div id="tipoServicioOptions" class="py-1">
                                <!-- Options will be dynamically populated -->
                            </div>
                        </div>
                    </div>
                    <input type="hidden" id="selectedServiceSubtype" name="tipoServicio" value="">
                </section>

                <!-- Sección de Fecha y Hora -->
                <section class="mb-6">
                    <h2 class="text-center text-black text-2xl font-semibold mb-4 bg-neutral-200 rounded-[5px] border border-black py-2">Fecha y Hora</h2>
                    <div class="w-full max-w-[340px] mx-auto">
                        <input type="hidden" 
                            id="fecha_inicio" 
                            name="fecha_inicio" 
                            value="">
                        
                        <input type="date" 
                            id="fecha_selector" 
                            class="w-full h-[60px] px-[22px] py-3.5 bg-white rounded-[10px] border border-[#161212] text-center text-black text-xl font-semibold mb-4"
                            required>
                        
                        <div id="loadingIndicator" class="hidden">
                            <div class="flex items-center justify-center py-4">
                                <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-red-600"></div>
                                <span class="ml-2">Cargando horarios disponibles...</span>
                            </div>
                        </div>

                        <div id="timeSlots" class="grid grid-cols-3 gap-2 mt-4"></div>

                        <div class="w-full flex flex-col space-y-2 justify-center items-center text-sm mt-4">
                            <p>Horario de atención: 5:00 AM - 5:00 PM</p>
                            <p id="serviceDurationMessage" class="text-red-600 hidden">Este servicio requiere seleccionar dos horarios consecutivos</p>
                        </div>
                    </div>
                </section>

                <!-- Sección de Tipo de Vehículo -->
                <section id="tipoVehiculoSection" class="mb-6">
                    <h2 class="text-center text-black text-2xl font-semibold mb-4 bg-neutral-200 rounded-[5px] border border-black py-2">Tipo de vehículo</h2>
                    <div class="relative mb-2">
                        <div id="dropdownButtonAuto" class="w-full h-[60px] px-[22px] py-3.5 bg-white rounded-[10px] border border-[#161212] flex justify-between items-center cursor-pointer">
                            <div id="selectedOptionAuto" class="text-center text-black text-xl font-semibold">Tipo de Vehículo</div>
                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 h-6 transition-transform duration-300">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
                            </svg>
                        </div>
                        <div id="dropTipoVehiculo" class="dropdown-menu absolute z-10 left-0 w-full mt-1 bg-white rounded-lg border border-[#161212] shadow-lg hidden">
                            <div class="py-1">
                                <div class="option cursor-pointer px-[22px] py-3.5 hover:bg-gray-100" data-value="auto">Auto</div>
                                <div class="option cursor-pointer px-[22px] py-3.5 hover:bg-gray-100" data-value="moto">Motocicleta</div>
                                <div class="option cursor-pointer px-[22px] py-3.5 hover:bg-gray-100" data-value="camion">Pequeño camión</div>
                                <div class="option cursor-pointer px-[22px] py-3.5 hover:bg-gray-100" data-value="camioneta">Camioneta</div>
                                <div class="option cursor-pointer px-[22px] py-3.5 hover:bg-gray-100" data-value="utilitario">Pequeño utilitario</div>
                            </div>
                        </div>
                    </div>
                    <input type="hidden" id="tipoVehiculo" name="tipoVehiculo" value="">
                </section>

                <!-- Sección de Vehículos -->
                <section class="mb-6">
                    <h2 class="text-center text-black text-2xl font-semibold mb-4 bg-neutral-200 rounded-[5px] border border-black py-2">Tus vehículos</h2>
                    <div class="relative w-full max-w-[340px] mx-auto">
                        <select id="vehiculosDropdown" name="matricula" class="w-full h-[60px] px-[22px] py-3.5 bg-white rounded-[10px] border border-[#161212] text-center text-black text-xl font-semibold">
                            <option value="" selected disabled>Seleccione un vehículo</option>
                            {% if misVehiculos %}
                                {% for vehiculo in misVehiculos %}
                                    <option value="{{ vehiculo.matricula }}" data-tipo="{{ vehiculo.tipo }}">{{ vehiculo.matricula }} ({{ vehiculo.tipo }})</option>
                                {% endfor %}
                            {% else %}
                                <option value="" disabled>No tienes vehículos vinculados</option>
                            {% endif %}
                        </select>
                    </div>
                </section>

                <div id="matriculaYaContainer" class="mb-6 w-full max-w-[340px] mx-auto">
                    <input id="matriculaYa" name="matriculaYa" type="text" placeholder="O registra ya con Matrícula" class="w-full h-[50px] px-[22px] py-3.5 text-[#2f353c] text-[22px] font-normal tracking-wide bg-white rounded-md border border-[#2f353c] text-left">
                </div>

                <!-- Sección de errores -->
                {% if response is defined and response.errors is defined and response.errors is not empty %}
                    <div id="error-container" class="text-red-600 mt-4">
                        <ul id="error-list">
                            {% for error in response.errors %}
                                <li>{{ error }}</li>
                            {% endfor %}
                        </ul>
                    </div>
                {% endif %}

                <div class="w-full max-w-[340px] mx-auto">
                    <button type="submit" class="w-full h-[62px] px-7 py-2.5 duration-300 btn rounded-lg text-neutral-50 text-[32px] font-bold leading-[51.78px]">Continuar</button>
                </div>
            </form>
        </div>
    </main>

    {% include 'partials/footer.html.twig' %}

   
    <script src="{{ asset('js/serviceHandler.js') }}"></script>
<!-- Utilidades de Fecha -->
<script>
    const DateUtils = {
        getUruguayDate(date) {
            return new Date(new Date(date).toLocaleString('en-US', { timeZone: 'America/Montevideo' }));
        },

        formatDateForUrl(date) {
            const d = new Date(date);
            return `${d.getFullYear()}-${String(d.getMonth() + 1).padStart(2, '0')}-${String(d.getDate()).padStart(2, '0')}`;
        },

        compareOnlyDates(date1, date2) {
            const d1 = new Date(date1);
            const d2 = new Date(date2);
            return d1.getFullYear() === d2.getFullYear() &&
                d1.getMonth() === d2.getMonth() &&
                d1.getDate() === d2.getDate();
        },

        parseTimeToDate(timeString, baseDate) {
            const [hours, minutes] = timeString.split(':').map(Number);
            const date = new Date(baseDate);
            date.setHours(hours, minutes, 0, 0);
            return date;
        }
    };
</script>

<!-- URL del servicio -->
<script>
    const GET_BLOCKED_TIMES_URL = "{{ path('getServicesSchedule') }}";
</script>

<!-- TimeSlotHandler - Funciones principales -->
<script>
    const TimeSlotHandler = {
        servicioSeleccionadoDuracion: 0,
        primerHorarioSeleccionado: null,
        horarioApertura: 5,  // 5 AM
        horarioCierre: 17,   // 5 PM (17:00)

        // Método para formatear hora para mostrar
        formatHora(hora) {
            const ampm = hora >= 12 ? 'PM' : 'AM';
            const hora12 = hora > 12 ? hora - 12 : hora;
            return `${hora12}:00 ${ampm}`;
        },

        // Método auxiliar para validar horario
        estaEnHorarioAtencion(hora) {
            return hora >= this.horarioApertura && hora < this.horarioCierre;
        },

        initialize() {
            const fechaSelector = document.getElementById('fecha_selector');
            if (fechaSelector) {
                const today = DateUtils.getUruguayDate(new Date());
                fechaSelector.min = DateUtils.formatDateForUrl(today);
                fechaSelector.addEventListener('change', (e) => this.handleDateChange(e));

                // Debug horarios
                console.log('Horarios de atención:', {
                    apertura: this.formatHora(this.horarioApertura),
                    cierre: this.formatHora(this.horarioCierre)
                });
            }
        },


        handleDateChange(event) {
            const fechaInicio = document.getElementById('fecha_inicio');
            if (fechaInicio) fechaInicio.value = '';

            if (this.servicioSeleccionadoDuracion > 0) {
                this.updateTimeSlots(event.target.value);
            } else {
                this.showError('Por favor, seleccione un servicio antes de elegir el horario.');
            }
        }
    };
    </script>

    <!-- TimeSlotHandler - Funciones de actualización de slots -->
    <script>
    Object.assign(TimeSlotHandler, {
        async updateTimeSlots(selectedDate) {
        const timeSlotsContainer = document.getElementById('timeSlots');
        const serviceDurationMessage = document.getElementById('serviceDurationMessage');
        const loadingIndicator = document.getElementById('loadingIndicator');
        const errorContainer = document.getElementById('error-container');

        try {
            const today = DateUtils.getUruguayDate(new Date());
            const selected = DateUtils.getUruguayDate(selectedDate);

            console.log('Validando fechas:', {
                today: today.toISOString(),
                selected: selected.toISOString(),
                isToday: DateUtils.compareOnlyDates(selected, today)
            });

            // Validar solo fechas pasadas
            if (selected < today && !DateUtils.compareOnlyDates(selected, today)) {
                throw new Error('No se pueden seleccionar fechas pasadas');
            }

            // Solo validar horario si es el día actual
            if (DateUtils.compareOnlyDates(selected, today)) {
                const currentHour = today.getHours();
                console.log('Hora actual:', currentHour);

                // Si es el día actual y la hora actual está fuera del horario de atención
                if (currentHour >= this.horarioCierre || currentHour < this.horarioApertura) {
                    console.log('Fuera de horario:', {
                        horarioApertura: this.horarioApertura,
                        horarioCierre: this.horarioCierre,
                        horaActual: currentHour
                    });
                    // Solo mostrar este error si es el día actual
                    throw new Error(`El taller está cerrado en este momento. Horario de atención: ${this.horarioApertura}:00 AM - ${this.horarioCierre}:00 PM`);
                }
            }

        if (!this.servicioSeleccionadoDuracion) {
            throw new Error('Por favor, seleccione un servicio antes de elegir el horario.');
        }

                if (loadingIndicator) loadingIndicator.classList.remove('hidden');
                if (errorContainer) errorContainer.classList.add('hidden');
                if (timeSlotsContainer) timeSlotsContainer.innerHTML = '';

                const url = `${GET_BLOCKED_TIMES_URL}?date=${encodeURIComponent(DateUtils.formatDateForUrl(selectedDate))}`;
                const response = await fetch(url, {
                    method: 'GET',
                    headers: {
                        'Accept': 'application/json',
                        'Content-Type': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    credentials: 'include'
                });

                let errorMessage = 'Error al obtener los horarios disponibles';
                
                if (!response.ok) {
                    const contentType = response.headers.get('content-type');
                    if (contentType && contentType.includes('application/json')) {
                        const errorData = await response.json();
                        errorMessage = errorData.error || errorData.message || errorMessage;
                    } else {
                        const errorText = await response.text();
                        try {
                            const errorData = JSON.parse(errorText);
                            errorMessage = errorData.error || errorData.message || errorMessage;
                        } catch (e) {
                            errorMessage = errorText || errorMessage;
                        }
                    }
                    throw new Error(errorMessage);
                }

                const data = await response.json();
                console.log('Respuesta del servidor:', data); // Debug

                if (!data || !data.horariosTaller) {
                    throw new Error('No hay horarios disponibles para la fecha seleccionada');
                }

                const slots = Object.entries(data.horariosTaller);
                console.log('Slots disponibles:', slots); // Debug

                if (slots.length === 0 || slots.every(([, info]) => info.ocupado)) {
                    throw new Error('No hay horarios disponibles para esta fecha. Por favor, seleccione otra fecha.');
                }

                this.renderTimeSlots(slots, selectedDate, serviceDurationMessage);

            } catch (error) {
                console.error('Error en updateTimeSlots:', error);
                this.showError(error.message);
                if (timeSlotsContainer) timeSlotsContainer.innerHTML = '';
            } finally {
                if (loadingIndicator) loadingIndicator.classList.add('hidden');
            }
        }
    });
    </script>

    <!-- TimeSlotHandler - Funciones de renderizado -->
    <script>
    Object.assign(TimeSlotHandler, {
        renderTimeSlots(slots, selectedDate, serviceDurationMessage) {
            const container = document.getElementById('timeSlots');
            if (!container) return;

            console.log('Renderizando slots:', {
                totalSlots: slots.length,
                ocupados: slots.filter(([, info]) => info.ocupado).length,
                disponibles: slots.filter(([, info]) => !info.ocupado).length
            });

            slots
                .sort(([, a], [, b]) => {
                    const timeA = a.hora_inicio || a.inicio || '';
                    const timeB = b.hora_inicio || b.inicio || '';
                    return timeA.localeCompare(timeB);
                })
                .forEach(([lapso, info]) => {
                    const button = this.createTimeSlotButton(lapso, info, selectedDate);
                    if (button) container.appendChild(button);
                });

            if (serviceDurationMessage) {
                serviceDurationMessage.classList[
                    this.servicioSeleccionadoDuracion > 30 ? 'remove' : 'add'
                ]('hidden');
            }
        },

        createTimeSlotButton(lapso, info, selectedDate) {
            const button = document.createElement('button');
            button.type = 'button';
            
            const horaInicio = info.hora_inicio || info.inicio;
            const horaFin = info.hora_fin || info.fin;
            
            console.log('Creando botón para lapso:', {
                lapso,
                horaInicio,
                horaFin,
                ocupado: info.ocupado
            });

            button.textContent = `${horaInicio} - ${horaFin}`;
            button.setAttribute('data-lapso', lapso);
            button.setAttribute('data-info', JSON.stringify({
                inicio: horaInicio,
                fin: horaFin,
                ocupado: info.ocupado
            }));

            let isDisabled = false;

            if (info.ocupado === true) {
                console.log(`Lapso ${lapso} está ocupado`);
                isDisabled = true;
            }

            if (this.isCurrentDay(selectedDate)) {
                const currentTime = DateUtils.getUruguayDate(new Date());
                const [hours, minutes] = horaInicio.split(':');
                const slotTime = new Date(selectedDate);
                slotTime.setHours(parseInt(hours, 10), parseInt(minutes, 10), 0);

                if (slotTime < currentTime) {
                    console.log(`Lapso ${lapso} es hora pasada`);
                    isDisabled = true;
                }

                const slotHour = parseInt(hours, 10);
                if (slotHour < this.horarioApertura || slotHour >= this.horarioCierre) {
                    console.log(`Lapso ${lapso} fuera de horario de atención`);
                    isDisabled = true;
                }
            }

            button.className = `w-full p-2 rounded-md text-center transition-colors ${
                isDisabled 
                    ? 'bg-gray-100 text-gray-400 cursor-not-allowed' 
                    : 'bg-white border border-gray-300 hover:bg-gray-50'
            }`;

            if (!isDisabled) {
                button.addEventListener('click', () => this.handleTimeSelection(lapso, info, button));
            }

            button.disabled = isDisabled;

            if (info.ocupado) {
                button.title = "Este horario no está disponible";
            }

            return button;
        }
    });
</script>
<!-- TimeSlotHandler - Funciones de manejo de selección -->
<script>
    Object.assign(TimeSlotHandler, {
        handleTimeSelection(lapso, timeInfo, button) {
            const fechaSelector = document.getElementById('fecha_selector');
            
            if (!fechaSelector?.value) {
                this.showError('Por favor, seleccione primero una fecha.');
                return;
            }

            if (this.servicioSeleccionadoDuracion <= 30) {
                this.handleSingleSelection(button, timeInfo, fechaSelector.value);
            } else {
                this.handleDoubleSelection(lapso, button);
            }
        },

        handleSingleSelection(button, timeInfo, selectedDate) {
            document.querySelectorAll('#timeSlots button').forEach(btn => {
                btn.classList.remove('bg-red-600', 'text-white');
            });
            
            button.classList.add('bg-red-600', 'text-white');
            const fechaInicio = document.getElementById('fecha_inicio');
            if (fechaInicio) {
                const horaInicio = timeInfo.hora_inicio || timeInfo.inicio;
                fechaInicio.value = `${selectedDate}T${horaInicio}`;
            }
        },

        handleDoubleSelection(lapso, selectedButton) {
            const buttons = document.querySelectorAll('#timeSlots button');
            
            if (!this.primerHorarioSeleccionado) {
                this.resetSlotStyles();
                this.primerHorarioSeleccionado = lapso;
                selectedButton.classList.add('bg-red-600', 'text-white');
                
                const currentIndex = Array.from(buttons).indexOf(selectedButton);
                this.highlightAdjacentSlots(buttons, currentIndex);
            } else {
                this.processSecondSelection(buttons, selectedButton);
            }
        }
    });
</script>

<!-- TimeSlotHandler - Funciones de utilidad -->
<script>
    Object.assign(TimeSlotHandler, {
        isCurrentDay(selectedDate) {
            const selected = DateUtils.getUruguayDate(selectedDate);
            const now = DateUtils.getUruguayDate(new Date());
            return DateUtils.compareOnlyDates(selected, now);
        },

        resetSlotStyles() {
            document.querySelectorAll('#timeSlots button').forEach(btn => {
                btn.classList.remove('bg-red-600', 'text-white', 'bg-yellow-200');
            });
        },

        highlightAdjacentSlots(buttons, currentIndex) {
            [-1, 1].forEach(offset => {
                const adjacentButton = buttons[currentIndex + offset];
                if (adjacentButton && !adjacentButton.disabled) {
                    adjacentButton.classList.add('bg-yellow-200');
                }
            });
        },

        processSecondSelection(buttons, selectedButton) {
            const firstButton = Array.from(buttons).find(btn => 
                btn.getAttribute('data-lapso') === this.primerHorarioSeleccionado);
            const firstIndex = Array.from(buttons).indexOf(firstButton);
            const secondIndex = Array.from(buttons).indexOf(selectedButton);

            if (Math.abs(firstIndex - secondIndex) === 1) {
                this.confirmDoubleSelection(buttons, firstIndex, secondIndex);
            } else {
                this.showError('Por favor, seleccione dos horarios consecutivos');
                this.resetSlotStyles();
                this.primerHorarioSeleccionado = null;
            }
        },

        confirmDoubleSelection(buttons, firstIndex, secondIndex) {
            this.resetSlotStyles();
            
            const startIndex = Math.min(firstIndex, secondIndex);
            const endIndex = Math.max(firstIndex, secondIndex);
            
            buttons[startIndex].classList.add('bg-red-600', 'text-white');
            buttons[endIndex].classList.add('bg-red-600', 'text-white');

            const startButton = buttons[startIndex];
            const startInfo = JSON.parse(startButton.getAttribute('data-info') || '{}');
            const fechaSelector = document.getElementById('fecha_selector');
            const fechaInicio = document.getElementById('fecha_inicio');

            if (fechaSelector?.value && startInfo.inicio && fechaInicio) {
                fechaInicio.value = `${fechaSelector.value}T${startInfo.inicio}`;
            }

            this.primerHorarioSeleccionado = null;
        },

        showError(message) {
            const errorContainer = document.getElementById('error-container');
            if (!errorContainer) return;

            errorContainer.classList.remove('hidden');
            const errorList = document.getElementById('error-list');
            
            if (errorList) {
                errorList.innerHTML = `<li>${message}</li>`;
            } else {
                errorContainer.textContent = message;
            }
            
            errorContainer.scrollIntoView({ behavior: 'smooth', block: 'center' });
            
            setTimeout(() => {
                if (errorContainer) {
                    errorContainer.classList.add('hidden');
                }
            }, 5000);
        }
    });
</script>

<!-- Funciones de validación del formulario -->
<script>
    function validarFormulario(event) {
        let isValid = true;
        let errorMessage = '';

        if (!document.getElementById('selectedServiceType').value) {
            isValid = false;
            errorMessage += 'Por favor, seleccione un tipo de servicio. ';
        } else if (!document.getElementById('selectedServiceSubtype').value) {
            isValid = false;
            errorMessage += 'Por favor, seleccione un subtipo de servicio. ';
        } else if (!document.getElementById('fecha_inicio').value) {
            isValid = false;
            errorMessage += 'Por favor, seleccione fecha y hora. ';
        } else if (!document.getElementById('tipoVehiculo').value && 
            document.getElementById('vehiculosDropdown').value === "") {
            isValid = false;
            errorMessage += 'Por favor, seleccione un tipo de vehículo o un vehículo existente. ';
        }

        if (!isValid) {
            event.preventDefault();
            TimeSlotHandler.showError(errorMessage);
        }
    }
</script>

<!-- Manejador de vehículos -->
<script>
    function setupVehicleHandlers() {
        const vehiculosDropdown = document.getElementById('vehiculosDropdown');
        const tipoVehiculoSection = document.getElementById('tipoVehiculoSection');
        const dropdownButtonAuto = document.getElementById('dropdownButtonAuto');
        const selectedOptionAuto = document.getElementById('selectedOptionAuto');
        const tipoVehiculo = document.getElementById('tipoVehiculo');
        const matriculaYa = document.getElementById('matriculaYa');
        const matriculaYaContainer = document.getElementById('matriculaYaContainer');
        const dropTipoVehiculo = document.getElementById('dropTipoVehiculo');

        // Opción default para mis vehículos
        const defaultOption = document.createElement('option');
        defaultOption.value = "default";
        defaultOption.text = "Seleccione un vehículo";
        vehiculosDropdown.insertBefore(defaultOption, vehiculosDropdown.firstChild);
        vehiculosDropdown.value = "default";

        // Event listener para el dropdown de vehículo
        vehiculosDropdown.addEventListener('change', function() {
            if (this.value !== "" && this.value !== "default") {
                const selectedOption = this.options[this.selectedIndex];
                const tipo = selectedOption.getAttribute('data-tipo');
                
                selectedOptionAuto.textContent = tipo;
                tipoVehiculo.value = tipo.toLowerCase();
                
                tipoVehiculoSection.classList.add('disabled-section');
                dropdownButtonAuto.style.pointerEvents = 'none';
                dropdownButtonAuto.style.backgroundColor = '#f3f4f6';
                dropTipoVehiculo.classList.add('hidden');
                
                matriculaYa.value = '';
                matriculaYa.removeAttribute('name');
                matriculaYaContainer.style.display = 'none';
                
                this.setAttribute('name', 'matricula');
            } else {
                tipoVehiculoSection.classList.remove('disabled-section');
                dropdownButtonAuto.style.pointerEvents = 'auto';
                dropdownButtonAuto.style.backgroundColor = 'white';
                matriculaYaContainer.style.display = 'block';
                selectedOptionAuto.textContent = 'Tipo de Vehículo';
                tipoVehiculo.value = '';
                
                this.removeAttribute('name');
                matriculaYa.setAttribute('name', 'matriculaYa');
            }
        });

        // Event listener para matrícula ya
        matriculaYa.addEventListener('input', function() {
            if (this.value !== "") {
                vehiculosDropdown.value = "default";
                vehiculosDropdown.removeAttribute('name');
                this.setAttribute('name', 'matriculaYa');
                tipoVehiculoSection.classList.remove('disabled-section');
                dropdownButtonAuto.style.pointerEvents = 'auto';
                dropdownButtonAuto.style.backgroundColor = 'white';
            } else {
                this.removeAttribute('name');
            }
        });
    }
</script>

<!-- Inicialización -->
<script>
    document.addEventListener('DOMContentLoaded', async function() {
        try {
            // Configurar ServiceHandler
            ServiceHandler.setJsonUrl("{{asset('js/diccionarioTaller.json')}}");
            
            // Cargar servicios
            const servicios = await ServiceHandler.cargarServicios();

            // Configurar dropdowns
            ServiceHandler.setupDropdown('dropdownButton1', 'dropdownMenu1', '#dropdownMenu1 .option', 'selectedOption1', 'selectedServiceType');
            ServiceHandler.setupDropdown('dropdownButton2', 'dropdownMenu2', '#tipoServicioOptions .option', 'selectedOption2', 'selectedServiceSubtype');
            ServiceHandler.setupDropdown('dropdownButtonAuto', 'dropTipoVehiculo', '#dropTipoVehiculo .option', 'selectedOptionAuto', 'tipoVehiculo');

            // Inicializar TimeSlotHandler
            TimeSlotHandler.initialize();

            // Configurar eventos para servicios
            document.querySelectorAll('#dropdownMenu1 .option').forEach(option => {
                option.addEventListener('click', () => {
                    ServiceHandler.updateServiceSubtypes(option.dataset.value, servicios, (subtype, servicioData) => {
                        document.getElementById('selectedOption2').textContent = servicioData.descripcion;
                        document.getElementById('selectedServiceSubtype').value = subtype;
                        TimeSlotHandler.servicioSeleccionadoDuracion = servicioData.tiempo_estimado;
                        document.getElementById('dropdownMenu2').classList.add('hidden');
                        
                        const fechaSelector = document.getElementById('fecha_selector');
                        if (fechaSelector?.value) {
                            TimeSlotHandler.updateTimeSlots(fechaSelector.value);
                        }
                    });
                });
            });

            // Event listener para el formulario
            document.getElementById('servicioForm').addEventListener('submit', validarFormulario);

            // Setup de manejo de vehículos
            setupVehicleHandlers();

        } catch (error) {
            console.error('Error en la inicialización:', error);
            TimeSlotHandler.showError('Error al inicializar el formulario');
        }
    });

    // Exportar TimeSlotHandler para uso global
    window.TimeSlotHandler = TimeSlotHandler;
</script>

</body>

</html>