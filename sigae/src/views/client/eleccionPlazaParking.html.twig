<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="description" content="AIO taller mecanico en montevideo, Estacionamiento 24 horas y mas">
    <meta name="keywords" content="Taller mecanico, taller mecanico montevideo, taller mecanico cerca de mi, estacionamiento 24 horas, venta de neumaticos">
    <meta name="author" content="All In One">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="{{ asset('css/styles.css') }}">
    <link rel="icon" type="image/x-icon" href="{{ asset('ico/logo-positivo.ico') }}">
    <title>Elección de plaza | AIO</title>
    <style>
        @font-face {
            font-family: 'Teachers';
            src: url("{{ asset('font/Teachers-VariableFont_wght.ttf') }}");
            font-weight: normal;
            font-style: normal;
        }

        body,
        input,
        select,
        button,
        option {
            font-family: 'Teachers', sans-serif;
        }

         .btnPark{
            background-color: #1f3de0
        }

        .btnPark:hover{
            background-color: #233181
        }
    </style>
</head>
        {% include 'partials/headerParking.html.twig' %}

<body class="bg-white">
    <div class="w-full max-w-[1440px] px-4 py-8 mx-auto flex flex-col items-center gap-8">
        <div
            class="w-full max-w-[896px] h-[46px] px-4 py-2 bg-[#d9d9d9] rounded-[10px] border border-[#c5b8b8] flex justify-center items-center gap-2.5">
            <button id="decrementFloor" class="w-[30px] h-[30px] bg-gray-100 rounded-full flex items-center justify-center">&lt;</button>
            <div id="floorDisplay" class="text-center text-black text-base font-medium">Piso 1</div>
            <button id="incrementFloor" class="w-[30px] h-[30px] bg-gray-100 rounded-full flex items-center justify-center">&gt;</button>
        </div>
        <div class="w-full flex flex-col space-y-2 justify-center items-center text-sm">
            <p><strong>B1-20:</strong> Motos (solo primer piso)</p> 
            <p><strong>A1-50:</strong> Autos, camionetas y pequeños camiones (primer piso)</p> 
            <p><strong>C1-50:</strong> Autos, camionetas y pequeños camiones (segundo piso)</p>
        </div>
          
        <form id="parkingForm" action="{{ path('submitParkingSlots') }}" method="POST">
            <div id="parkingContainer"
                class="w-full max-w-[600px] h-auto min-h-[359px] p-4 pt-8 bg-white border border-black relative">
            <!-- Parking spots will be generated here -->
            </div>

            <input type="hidden" name="selectedSpots" id="selectedSpotsInput">
            <div class="w-full max-w-[388px] flex justify-center mt-4">
                <button type="submit" class="w-full max-w-[340px] h-[62px] px-7 py-2.5 duration-300 btnPark rounded-lg text-neutral-50 text-[32px] font-bold leading-[51.78px]">
                    Continuar
                </button>
            </div>
        </form>
    </div>    
    <script>
        // Convertir las plazas libres a un array de strings
        var plazasLibres = {{ plazasLibres|map(plaza => "'" ~ plaza.getId() ~ "'")|join(', ')|raw }};
    </script>

    <script>
const vehicleType = "{{ vehiculoTipo }}"; 

// Variables globales para manejar el estado del parking
let selectedSpots = [];  // Almacena las plazas seleccionadas actualmente
let currentFloor = 1;   
// Función principal que genera el layout del estacionamiento

function generateParkingLayout() {
    const container = document.getElementById('parkingContainer');
    container.innerHTML = ''; // Limpia el contenedor antes de generar nuevo layout

    // Switch para determinar qué tipo de layout mostrar según el vehículo
    switch(vehicleType) {
        case 'moto':
            // Las motos solo pueden estar en el primer piso
            if (currentFloor === 2) {
                container.innerHTML = '<p class="text-center text-red-500">Las motos solo pueden estacionar en el primer piso.</p>';
                return;
            }
            generateMotoLayout(container);
            break;
        case 'auto':
        case 'camioneta':
            // Autos y camionetas pueden usar cualquier plaza normal
            generateAutoLayout(container);
            break;
        case 'pequenoCamion':
        case 'utilitario':
            // Vehículos grandes necesitan dos plazas consecutivas
            generateLargeVehicleLayout(container);
            break;
        default:
            console.error('Tipo de vehículo no válido');
            return;
    }
}

//Genera el layout específico para motos
function generateMotoLayout(container) {
    const motoSpots = createParkingColumn(1, 20, 'B');
    container.appendChild(createDiv('flex justify-center', [
        createDiv('w-1/4', [motoSpots])
    ]));
}

// Genera el layout para autos y camionetas

function generateAutoLayout(container) {
    // Usa prefijo A para primer piso y C para segundo piso
    const prefix = currentFloor === 1 ? 'A' : 'C';
    
    // Crea tres columnas de plazas
    const leftColumn = createParkingColumn(1, 20, prefix);    // Plazas 1-20
    const middleColumn = createParkingColumn(21, 30, prefix); // Plazas 21-30
    const rightColumn = createParkingColumn(31, 50, prefix);  // Plazas 31-50

    // Estructura el layout con las tres columnas y un pasillo
    container.appendChild(createDiv('flex justify-center gap-[150px] h-full', [
        createDiv('flex flex-col justify-start overflow-y-auto', [leftColumn]),
        createDiv('flex flex-col justify-end', [
            middleColumn,
            createDiv('w-[45px] h-[108px] border-t border-b border-l border-black') // Pasillo
        ]),
        createDiv('flex flex-col justify-start overflow-y-auto', [rightColumn])
    ]));
}

// Genera el layout para vehículos grandes

 
function generateLargeVehicleLayout(container) {
    generateAutoLayout(container);
    // Agrega mensaje informativo sobre selección de espacios consecutivos
    const message = document.createElement('div');
    message.className = 'absolute top-0 left-0 right-0 text-center text-red-500 p-2';
    message.textContent = 'Debe seleccionar dos espacios consecutivos';
    container.insertBefore(message, container.firstChild);
}

// Maneja la selección de plazas según el tipo de vehículo

function handleSpotSelection(spot) {
    // Determina qué tipo de selección usar según el vehículo
    if (vehicleType === 'pequenoCamion' || vehicleType === 'utilitario') {
        handleLargeVehicleSelection(spot);  // Selección de dos plazas
    } else {
        handleRegularSelection(spot);       // Selección de una plaza
    }
}

//Maneja la selección de una única plaza para vehículos normales

function handleRegularSelection(spot) {
    // Limpia selecciones anteriores
    selectedSpots.forEach(s => s.classList.remove('bg-[#5381c6]', 'text-white'));
    // Actualiza la selección
    selectedSpots = [spot];
    // Marca visualmente la plaza seleccionada
    spot.classList.add('bg-[#5381c6]', 'text-white');
}

// Maneja la selección de plazas para vehículos grandes Permite seleccionar dos plazas consecutivas

function handleLargeVehicleSelection(spot) {
    if (selectedSpots.length === 0) {
        // Primera selección
        selectedSpots.push(spot);
        spot.classList.add('bg-[#5381c6]', 'text-white');
    } else if (selectedSpots.length === 1) {
        // Verifica si la segunda selección es adyacente
        if (isAdjacentSpot(selectedSpots[0], spot)) {
            selectedSpots.push(spot);
            spot.classList.add('bg-[#5381c6]', 'text-white');
        } else {
            // Reinicia selección si no es adyacente
            selectedSpots[0].classList.remove('bg-[#5381c6]', 'text-white');
            selectedSpots = [spot];
            spot.classList.add('bg-[#5381c6]', 'text-white');
        }
    } else {
        // Reinicia selección si ya había dos spots
        selectedSpots.forEach(s => s.classList.remove('bg-[#5381c6]', 'text-white'));
        selectedSpots = [spot];
        spot.classList.add('bg-[#5381c6]', 'text-white');
    }
}


function createParkingSpot(number, prefix) {
    const spotId = `${prefix}${number}`;
    const spot = document.createElement('button');
    
    // Configuración visual de la plaza
    spot.className = 'flex items-center justify-center border border-black m-0.5 cursor-pointer transition-colors w-14 h-10 hover:bg-gray-100';
    spot.innerHTML = `<div class="text-center text-black text-xs font-bold">${spotId}</div>`;
    spot.dataset.spot = spotId;
    spot.type = 'button';

    // Si la plaza no está libre, la deshabilita
    if (!puestosLibres.includes(spotId)) {
        spot.classList.add('bg-gray-500', 'text-white', 'cursor-not-allowed');
        spot.disabled = true;
    } else {
        // Agrega el manejador de eventos si la plaza está libre
        spot.addEventListener('click', (e) => {
            e.preventDefault();
            handleSpotSelection(spot);
        });
    }

    return spot;
}

// Event Listeners para el formulario y controles de piso
document.getElementById('parkingForm').addEventListener('submit', function(e) {
    e.preventDefault();
    
    // Validaciones antes de enviar
    if ((vehicleType === 'pequenoCamion' || vehicleType === 'utilitario') && selectedSpots.length !== 2) {
        alert('Debe seleccionar dos espacios consecutivos para vehículos grandes');
        return;
    }
    
    if (selectedSpots.length === 0) {
        alert('Debe seleccionar al menos un espacio de estacionamiento');
        return;
    }

    // Prepara los datos para enviar
    const output = (vehicleType === 'pequenoCamion' || vehicleType === 'utilitario') 
        ? selectedSpots.map(spot => spot.dataset.spot)  // Array con dos plazas para vehículos grandes
        : [selectedSpots[0].dataset.spot, null];        // Array con una plaza para vehículos normales

    document.getElementById('selectedSpotsInput').value = JSON.stringify(output);
    this.submit();
});

// Botones de control de piso
document.getElementById('decrementFloor').addEventListener('click', function() {
    if (currentFloor > 1) {
        currentFloor--;
        updateFloorDisplay();
        generateParkingLayout();
    }
});

document.getElementById('incrementFloor').addEventListener('click', function() {
    if (currentFloor < 2 && vehicleType !== 'moto') {
        currentFloor++;
        updateFloorDisplay();
        generateParkingLayout();
    }
});

// Actualiza el display del número de piso
 
function updateFloorDisplay() {
    document.getElementById('floorDisplay').textContent = `Piso ${currentFloor}`;
}

// Inicialización cuando el DOM está listo
document.addEventListener('DOMContentLoaded', function() {
    updateFloorDisplay();
    generateParkingLayout();
});
    </script>

            {% include 'partials/footer.html.twig' %}

</body>



</html>
