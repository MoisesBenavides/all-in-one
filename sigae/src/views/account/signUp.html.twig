<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Registro | AIO</title>

  <link rel="stylesheet" href="{{ asset('css/styles.css') }}">
  <link rel="icon" type="image/x-icon" href="{{ asset('ico/logo-positivo.ico') }}">
  <style>
    @font-face {
      font-family: 'Teachers';
      src: url("{{ asset('font/Teachers-VariableFont_wght.ttf') }}");
      font-weight: normal;
      font-style: normal;
    }

    body, input, select, button, option {
      font-family: 'Teachers', sans-serif;
    }

    .input-container {
      margin-bottom: 1rem;
    }

    .input-wrapper {
      position: relative;
    }

    .error-message {
      color: #950d03;
      font-size: 14px;
      margin-top: 4px;
      min-height: 20px; /* Reserve space for error message */
    }

    .password-toggle {
      position: absolute;
      right: 10px;
      top: 50%;
      transform: translateY(-50%);
      background: none;
      border: none;
      cursor: pointer;
    }
  </style>
</head>

<body class="bg-gray-100 flex justify-center items-center min-h-screen">
  <div class="container max-w-full sm:max-w-lg bg-white rounded-lg shadow-md p-6 sm:p-8">
    <div class="text-center mb-8">
      <img class="mx-auto max-w-[200px]" src="{{ asset('img/AIO Positivo.png') }}" alt="AIO Logo" />
    </div>
    <form id="signup-form" action="{{ path('doSignup') }}" method="POST" class="space-y-4">
      <div class="input-container">
        <div class="input-wrapper">
          <input id="email" name="email" type="email" placeholder="Correo" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 transition">
        </div>
        <div class="error-message" id="email-error"></div>
      </div>
      <div class="input-container">
        <div class="input-wrapper">
          <input id="nombre" name="nombre" type="text" placeholder="Nombre" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 transition">
        </div>
        <div class="error-message" id="nombre-error"></div>
      </div>
      <div class="input-container">
        <div class="input-wrapper">
          <input id="apellido" name="apellido" type="text" placeholder="Apellido" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 transition">
        </div>
        <div class="error-message" id="apellido-error"></div>
      </div>
      <div class="input-container">
        <div class="input-wrapper">
          <input id="contrasena" name="contrasena" type="password" placeholder="Contraseña" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 transition">
          <button type="button" class="password-toggle" onclick="togglePasswordVisibility('contrasena')">
            <svg class="h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
            </svg>
          </button>
        </div>
        <div class="error-message" id="contrasena-error"></div>
      </div>
      <div class="input-container">
        <div class="input-wrapper">
          <input id="repContrasena" name="repContrasena" type="password" placeholder="Repetir contraseña" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 transition">
          <button type="button" class="password-toggle" onclick="togglePasswordVisibility('repContrasena')">
            <svg class="h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
            </svg>
          </button>
        </div>
        <div class="error-message" id="repContrasena-error"></div>
      </div>

      <p class="text-sm text-gray-600">Use un mínimo 6 caracteres con mayúsculas, minúsculas y números.</p>
      {% if response.errors is defined and response.errors is not empty %}
        <div id="error-container" class="text-[#950d03] p-4 rounded-md mb-4">
          <ul id="error-list">
            {% for error in response.errors %}
              <li>{{ error }}</li>
            {% endfor %}
          </ul>
        </div>
      {% endif %}

      <button type="submit" class="w-full duration-300 bg-botonAIO hover:bg-botonAIO-hover  text-white py-2 rounded-md  transition cursor-pointer">
        Enviar
      </button>
    </form>
    <div class="mt-6 text-center space-y-2">
      <p>
        <a href="{{ path('login') }}" class="text-sm text-gray-600 hover:underline">¿Ya tienes una cuenta? Inicia sesión aquí</a>
      </p>
    </div>
  </div>
  <script>
    // Obtener referencias a los elementos del formulario
    const form = document.getElementById('signup-form');
    const email = document.getElementById('email');
    const nombre = document.getElementById('nombre');
    const apellido = document.getElementById('apellido');
    const contrasena = document.getElementById('contrasena');
    const repContrasena = document.getElementById('repContrasena');

    // Agregar evento de envío al formulario
    form.addEventListener('submit', (e) => {
      e.preventDefault(); // Evitar envío por defecto
      if (validateInputs()) {
        form.submit(); // Enviar el formulario si es válido
      }
    });

    // Función para marcar un campo como válido
    const setSuccess = (element) => {
      element.classList.remove('border-red-500');
      const errorDisplay = element.parentElement.nextElementSibling;
      errorDisplay.textContent = '';
    };

    // Función para marcar un campo como inválido y mostrar un mensaje de error
    const setError = (element, message) => {
      element.classList.add('border-red-500');
      const errorDisplay = element.parentElement.nextElementSibling;
      errorDisplay.textContent = message;
    };

    // Función para validar el formato del correo electrónico
    const isValidEmail = (email) => {
      const regex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      return regex.test(email);
    };

    // Función para validar un campo específico
    const validateInput = (input) => {
      const inputValue = input.value.trim();

      switch(input.id) {
        case 'email':
          if (inputValue === '') {
            setError(input, 'Por favor ingrese su correo electrónico');
          } else if (!isValidEmail(inputValue)) {
            setError(input, 'Correo electrónico inválido');
          } else {
            setSuccess(input);
          }
          break;
        case 'nombre':
        case 'apellido':
          if (inputValue === '') {
            setError(input, `Por favor ingrese su ${input.id}`);
          } else {
            setSuccess(input);
          }
          break;
        case 'contrasena':
          if (inputValue === '') {
            setError(input, 'Por favor ingrese una contraseña');
          } else if (inputValue.length < 6) {
            setError(input, 'La contraseña debe tener al menos 6 caracteres');
          } else if (!/[A-Z]/.test(inputValue) || !/[a-z]/.test(inputValue) || !/\d/.test(inputValue)) {
            setError(input, 'La contraseña debe incluir mayúsculas, minúsculas y números');
          } else {
            setSuccess(input);
          }
          break;
        case 'repContrasena':
          if (inputValue === '') {
            setError(input, 'Por favor repita la contraseña');
          } else if (inputValue !== contrasena.value) {
            setError(input, 'Las contraseñas no coinciden');
          } else {
            setSuccess(input);
          }
          break;
      }
    };

    // Función para validar todos los campos del formulario
    const validateInputs = () => {
      let isValid = true;
      [email, nombre, apellido, contrasena, repContrasena].forEach(input => {
        validateInput(input);
        if (input.classList.contains('border-red-500')) {
          isValid = false;
        }
      });
      return isValid;
    };

    // Agregar eventos de validación en tiempo real a los campos
    [email, nombre, apellido, contrasena, repContrasena].forEach(input => {
      input.addEventListener('input', () => validateInput(input));
    });

    // Función para alternar la visibilidad de la contraseña
    function togglePasswordVisibility(inputId) {
      const input = document.getElementById(inputId);
      const button = input.nextElementSibling;
      if (input.type === 'password') {
        input.type = 'text';
        button.innerHTML = `
          <svg class="h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.88 9.88l-3.29-3.29m7.532 7.532l3.29 3.29M3 3l3.59 3.59m0 0A9.953 9.953 0 0112 5c4.478 0 8.268 2.943 9.543 7a10.025 10.025 0 01-4.132 5.411m0 0L21 21" />
          </svg>
        `;
      } else {
        input.type = 'password';
        button.innerHTML = `
          <svg class="h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
          </svg>
        `;
      }
    }
  </script>
</body>
</html>